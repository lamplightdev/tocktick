(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./public/js/app.js":[function(require,module,exports){
"use strict";

var RouterMain = require("../../lib/router-main");

var Handlebars = require("../../node_modules/handlebars/dist/handlebars.runtime");
var helpers = require("../../lib/helpers");

var Offline = require("../../lib/offline");
var request = require("then-request");

/*
// Make sure we are accessing over https, if not redirect
if ((!location.port || location.port === "80") && location.protocol !== "https:" && location.host !== "localhost") {
  location.protocol = "https:";
}
*/

/*
// Register our ServiceWorker
if (navigator.serviceWorker) {
  navigator.serviceWorker.register("/worker.js", {
    scope: "/"
  }).then(function (reg) {
    console.log("SW register success", reg);
  }, function (err) {
    console.log("SW register fail", err);
  });
}
*/

for (var key in App.templates) {
  if (App.templates.hasOwnProperty(key)) {
    Handlebars.registerPartial(key, Handlebars.template(App.templates[key]));
  }
}

for (var helper in helpers) {
  Handlebars.registerHelper(helper, helpers[helper]);
}

window.router = new RouterMain(App.Data.user, App.templates);

window.router.init().then(function () {
  if (!App.Data.status404) {
    window.router.router.check(true);
  }
}).then(null, function (err) {
  Promise.reject(new Error(err));
});

if (Offline.isOnline()) {
  (function () {
    var queue = localStorage.getItem("api-queue");
    if (queue) {
      (function () {
        queue = JSON.parse(queue);

        var promises = [];

        queue.forEach(function (q) {
          promises.push(request(q.method, q.action, {
            json: q.data,
            qs: q.qs
          }).then(function (res) {
            if (res.statusCode !== 0) {
              return true;
            }
            return false;
          }, function (err) {
            return false;
          }));
        });

        Promise.all(promises).then(function (results) {
          var index = 0;
          results.forEach(function (result) {
            if (result) {
              queue.splice(index, 1);
            }
            index++;
          });
          localStorage.setItem("api-queue", JSON.stringify(queue));
        });
      })();
    }
  })();
}

},{"../../lib/helpers":"/Library/WebServer/Documents/tocktick/lib/helpers.js","../../lib/offline":"/Library/WebServer/Documents/tocktick/lib/offline.js","../../lib/router-main":"/Library/WebServer/Documents/tocktick/lib/router-main.js","../../node_modules/handlebars/dist/handlebars.runtime":"/Library/WebServer/Documents/tocktick/node_modules/handlebars/dist/handlebars.runtime.js","then-request":"/Library/WebServer/Documents/tocktick/node_modules/then-request/browser.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/account.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ViewAccount = require("../views/account");

var Job = require("../models/job");
var Tag = require("../models/tag");

var ControllerAccount = (function (Controller) {
  function ControllerAccount() {
    _classCallCheck(this, ControllerAccount);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerAccount, Controller);

  _prototypeProperties(ControllerAccount, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {
          this._view = new ViewAccount(container, templates, {
            onJobAddSubmit: function (jobData) {
              var result = _this.jobAddSubmit(jobData);
              if (_this._callbacks.onJobAddSubmit) {
                _this._callbacks.onJobAddSubmit(result);
              }
              return result;
            },
            onTagAddSubmit: function (tagData) {
              var result = _this.tagAddSubmit(tagData);
              if (_this._callbacks.onTagAddSubmit) {
                _this._callbacks.onTagAddSubmit(result);
              }
              return result;
            },
            onJobDeleteSubmit: function (job) {
              var result = _this.jobDeleteSubmit(job);
              if (_this._callbacks.onJobDeleteSubmit) {
                _this._callbacks.onJobDeleteSubmit(result);
              }
              return result;
            },
            onJobDeleteResponse: function (job) {},
            onTagDeleteSubmit: function (tag) {
              var result = _this.tagDeleteSubmit(tag);
              if (_this._callbacks.onTagDeleteSubmit) {
                _this._callbacks.onTagDeleteSubmit(result);
              }
              return result;
            },
            onTagDeleteResponse: function (tag) {} });
        }
      },
      writable: true,
      configurable: true
    },
    jobAddSubmit: {
      value: function jobAddSubmit(jobData) {
        var job = new Job(jobData);
        this._data.grouped.addJob(job);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return job;
      },
      writable: true,
      configurable: true
    },
    tagAddSubmit: {
      value: function tagAddSubmit(tagData) {
        var tag = new Tag(tagData);
        this._data.grouped.addTag(tag);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return tag;
      },
      writable: true,
      configurable: true
    },
    jobDeleteSubmit: {
      value: function jobDeleteSubmit(job) {
        this._data.grouped.removeJob(job);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return job;
      },
      writable: true,
      configurable: true
    },
    tagDeleteSubmit: {
      value: function tagDeleteSubmit(tag) {
        this._data.grouped.removeTag(tag);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return tag;
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerAccount;
})(Controller);

module.exports = ControllerAccount;

},{"../models/job":"/Library/WebServer/Documents/tocktick/lib/models/job.js","../models/tag":"/Library/WebServer/Documents/tocktick/lib/models/tag.js","../views/account":"/Library/WebServer/Documents/tocktick/lib/views/account.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/app.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ViewApp = require("../views/app");

var Timer = require("../models/timer");
var Job = require("../models/job");
var Tag = require("../models/tag");

var ControllerApp = (function (Controller) {
  function ControllerApp() {
    _classCallCheck(this, ControllerApp);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerApp, Controller);

  _prototypeProperties(ControllerApp, null, {
    _initView: {
      value: function _initView(container, templates) {
        if (!this._view) {
          this._view = new ViewApp(container, templates, {});
        }
      },
      writable: true,
      configurable: true
    },
    removeTimer: {
      value: function removeTimer(timerData) {
        var timer = new Timer(timerData._members, timerData._tagIDs, timerData._id);
        this._data.grouped.removeTimer(timer);
      },
      writable: true,
      configurable: true
    },
    addOrUpdateTimer: {
      value: function addOrUpdateTimer(timerData) {
        var timer = new Timer(timerData._members, timerData._tagIDs, timerData._id);
        this._data.grouped.addOrUpdateTimer(timer);
      },
      writable: true,
      configurable: true
    },
    addJob: {
      value: function addJob(members, id) {
        //TODO: add as middleware
        if (!this._data.user) {
          return Promise.reject(new Error("No user"));
        }

        var userID = this._data.user.getID();

        var j = new Job(members, id);
        return j.save(userID);
      },
      writable: true,
      configurable: true
    },
    addTag: {
      value: function addTag(members, id) {
        //TODO: add as middleware
        if (!this._data.user) {
          return Promise.reject(new Error("No user"));
        }

        var userID = this._data.user.getID();

        var t = new Tag(members, id);
        return t.save(userID);
      },
      writable: true,
      configurable: true
    },
    deleteJob: {
      value: function deleteJob(id) {
        return Job.find(id).then(function (job) {
          job.remove();

          return job;
        });
      },
      writable: true,
      configurable: true
    },
    deleteTag: {
      value: function deleteTag(id) {
        return Tag.find(id).then(function (tag) {
          tag.remove();

          return tag;
        });
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerApp;
})(Controller);

module.exports = ControllerApp;

},{"../models/job":"/Library/WebServer/Documents/tocktick/lib/models/job.js","../models/tag":"/Library/WebServer/Documents/tocktick/lib/models/tag.js","../models/timer":"/Library/WebServer/Documents/tocktick/lib/models/timer.js","../views/app":"/Library/WebServer/Documents/tocktick/lib/views/app.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("../views/view");

var Controller = (function () {
  function Controller(models, templates, container, callbacks) {
    _classCallCheck(this, Controller);

    this._data = models;
    this._callbacks = callbacks || {};

    this._extraData = {};

    this._view = null;

    templates = templates || {};
    this._initView(container, templates);
  }

  _prototypeProperties(Controller, null, {
    setExtraData: {
      value: function setExtraData(data) {
        this._extraData = data;
      },
      writable: true,
      configurable: true
    },
    addExtraData: {
      value: function addExtraData(data) {
        Object.assign(this._extraData, data);
      },
      writable: true,
      configurable: true
    },
    setData: {
      value: function setData(data) {
        Object.assign(this._data, data);
      },
      writable: true,
      configurable: true
    },
    getViewData: {
      value: function getViewData() {
        return Object.assign({}, this._data, this._extraData);
      },
      writable: true,
      configurable: true
    },
    getView: {
      value: function getView() {
        return this._view;
      },
      writable: true,
      configurable: true
    },
    initView: {
      value: function initView(container, templates) {
        if (!this._view) {
          this._view = new View(container, templates, {});
        }
      },
      writable: true,
      configurable: true
    },
    renderView: {
      value: function renderView(preRendered) {
        this._initView();

        this._view.render(this.getViewData(), preRendered);
      },
      writable: true,
      configurable: true
    }
  });

  return Controller;
})();

module.exports = Controller;

},{"../views/view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/front.js":[function(require,module,exports){
"use strict";

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ControllerTimerJob = require("./timer-job");
var ControllerTimerTags = require("./timer-tags");
var ViewFront = require("../views/front");
var Timer = require("../models/timer");
var Job = require("../models/job");

var ControllerFront = (function (Controller) {
  function ControllerFront() {
    _classCallCheck(this, ControllerFront);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerFront, Controller);

  _prototypeProperties(ControllerFront, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {
          this._view = new ViewFront(container, templates, {
            onTimerStartSubmit: function (timerData, tagIDs) {
              var result = _this.timerStartSubmit(timerData, tagIDs);
              if (_this._callbacks.onTimerStartSubmit) {
                _this._callbacks.onTimerStartSubmit(result);
              }
              return result;
            },
            onTimerStartResponse: function (timerData) {
              var result = _this.timerStartResponse(timerData);
              if (_this._callbacks.onTimerStartResponse) {
                _this._callbacks.onTimerStartResponse(result);
              }
              return result;
            },

            onTimerJobClick: function (timerID, container) {
              _this.timerJobClicked(timerID, container);
            },

            onTimerTagsClick: function (timerID, container) {
              _this.timerTagsClicked(timerID, container);
            } });
        }
      },
      writable: true,
      configurable: true
    },
    getViewData: {
      value: function getViewData() {
        var recentJob = this._data.grouped.getMostRecentJob();
        var recentTimer = this._data.grouped.getMostRecentTimer();

        if (recentTimer) {
          recentJob = this._data.grouped.findJob(recentTimer.getJobID());
        }

        return Object.assign({}, _get(Object.getPrototypeOf(ControllerFront.prototype), "getViewData", this).call(this), {
          recentJob: recentJob
        });
      },
      writable: true,
      configurable: true
    },
    timerStartSubmit: {
      value: function timerStartSubmit(timerData, tagIDs) {
        var timer = this._data.grouped.startNewTimer(timerData, tagIDs);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return timer;
      },
      writable: true,
      configurable: true
    },
    timerStartResponse: {
      value: function timerStartResponse(timerData) {
        console.log("timerStartResponse", timerData);
      },
      writable: true,
      configurable: true
    },
    startTimer: {
      value: function startTimer(id, members, tagIDs) {
        //TODO: add as middleware
        if (!this._data.user) {
          return Promise.reject(new Error("No user"));
        }

        var userID = this._data.user.getID();

        var promises = [];

        if (id) {
          promises.push(Timer.find(id));
        } else {
          promises.push(Promise.resolve(false));
        }

        promises.push(Job.find(members.jobID));

        return Promise.all(promises).then(function (results) {
          var _results = _slicedToArray(results, 2);

          var timer = _results[0];
          var job = _results[1];

          if (!timer) {
            timer = new Timer({
              jobID: job.getID(),
              description: members.description
            }, [], id);
          }
          timer.setTagIDs(tagIDs);
          return timer.start(members.startTime);
        }).then(function (timer) {
          return timer.save(userID);
        }).then(null, function (err) {
          return Promise.reject(err);
        });
      },
      writable: true,
      configurable: true
    },
    stopTimer: {
      value: function stopTimer(id, stopTime) {
        var _this = this;

        return Timer.find(id).then(function (timer) {
          return timer.stop(stopTime);
        }).then(function (timer) {
          return timer.save(_this._data.user.getID());
        });
      },
      writable: true,
      configurable: true
    },
    updateTimer: {
      value: function updateTimer(id, members, tagIDs) {
        var _this = this;

        var currentJobID = undefined;

        return Timer.find(id).then(function (timer) {
          currentJobID = timer.getJobID();
          timer.updateMembers(members);
          timer.setTagIDs(tagIDs);
          return timer;
        }).then(function (timer) {
          return timer.save(_this._data.user.getID(), timer.getJobID(), currentJobID);
        });
      },
      writable: true,
      configurable: true
    },
    deleteTimer: {
      value: function deleteTimer(id) {
        return Timer.find(id).then(function (timer) {
          timer.remove();

          return timer;
        });
      },
      writable: true,
      configurable: true
    },
    timerJobClicked: {
      value: function timerJobClicked(timerID, container) {
        var ctrlr = new ControllerTimerJob({
          timer: this._data.timer,
          jobs: this._data.grouped.getOrderedJobs()
        }, App.templates, container, {
          onJobSelected: this.jobSelected.bind(this)
        });

        ctrlr.renderView();
      },
      writable: true,
      configurable: true
    },
    timerTagsClicked: {
      value: function timerTagsClicked(timerID, container) {
        var ctrlr = new ControllerTimerTags({
          timer: this._data.timer,
          tags: this._data.grouped.getOrderedTags()
        }, App.templates, container, {
          onDone: this.tagsSelected.bind(this)
        });

        ctrlr.renderView();
      },
      writable: true,
      configurable: true
    },
    jobSelected: {
      value: function jobSelected() {
        this.getView().setDirty("all");
        this.renderView();
      },
      writable: true,
      configurable: true
    },
    tagsSelected: {
      value: function tagsSelected() {
        this.getView().setDirty("all");
        this.renderView();
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerFront;
})(Controller);

module.exports = ControllerFront;

},{"../models/job":"/Library/WebServer/Documents/tocktick/lib/models/job.js","../models/timer":"/Library/WebServer/Documents/tocktick/lib/models/timer.js","../views/front":"/Library/WebServer/Documents/tocktick/lib/views/front.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js","./timer-job":"/Library/WebServer/Documents/tocktick/lib/controllers/timer-job.js","./timer-tags":"/Library/WebServer/Documents/tocktick/lib/controllers/timer-tags.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/nav.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ViewNav = require("../views/nav");

var ControllerNav = (function (Controller) {
  function ControllerNav() {
    _classCallCheck(this, ControllerNav);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerNav, Controller);

  _prototypeProperties(ControllerNav, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {
          this._view = new ViewNav(container, templates, {
            onTimerStartSubmit: function (timerData) {
              var result = _this.timerStartSubmit(timerData);
              if (_this._callbacks.onTimerStartSubmit) {
                _this._callbacks.onTimerStartSubmit(result);
              }
              return result;
            },
            onLinkClicked: this._callbacks.onLinkClicked
          });
        }
      },
      writable: true,
      configurable: true
    },
    timerStartSubmit: {
      value: function timerStartSubmit(timerData) {
        var timer = this._data.grouped.startNewTimer(timerData);

        this._view.setDirty("all");
        this._view.render(this.getViewData());

        return timer;
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerNav;
})(Controller);

module.exports = ControllerNav;

},{"../views/nav":"/Library/WebServer/Documents/tocktick/lib/views/nav.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/timer-job.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ViewTimerJob = require("../views/timer-job");

var ControllerTimerJob = (function (Controller) {
  function ControllerTimerJob() {
    _classCallCheck(this, ControllerTimerJob);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerTimerJob, Controller);

  _prototypeProperties(ControllerTimerJob, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {
          this._view = new ViewTimerJob(container, templates, {
            onJobSelected: (function (jobID) {
              _this._data.timer.setJobID(jobID);
              if (_this._callbacks.onJobSelected) {
                _this._callbacks.onJobSelected(jobID);
              }
            }).bind(this) });
        }
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerTimerJob;
})(Controller);

module.exports = ControllerTimerJob;

},{"../views/timer-job":"/Library/WebServer/Documents/tocktick/lib/views/timer-job.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/timer-tags.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ViewTimerTags = require("../views/timer-tags");

var ControllerTimerTags = (function (Controller) {
  function ControllerTimerTags() {
    _classCallCheck(this, ControllerTimerTags);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerTimerTags, Controller);

  _prototypeProperties(ControllerTimerTags, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {
          this._view = new ViewTimerTags(container, templates, {
            onDone: (function (tagIDs) {
              _this._data.timer.setTagIDs(tagIDs);
              _this._callbacks.onDone();
            }).bind(this) });
        }
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerTimerTags;
})(Controller);

module.exports = ControllerTimerTags;

},{"../views/timer-tags":"/Library/WebServer/Documents/tocktick/lib/views/timer-tags.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js"}],"/Library/WebServer/Documents/tocktick/lib/controllers/timers.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Controller = require("./controller");
var ControllerTimerJob = require("./timer-job");
var ControllerTimerTags = require("./timer-tags");
var ViewTimers = require("../views/timers");

var ControllerTimers = (function (Controller) {
  function ControllerTimers() {
    _classCallCheck(this, ControllerTimers);

    if (Controller != null) {
      Controller.apply(this, arguments);
    }
  }

  _inherits(ControllerTimers, Controller);

  _prototypeProperties(ControllerTimers, null, {
    _initView: {
      value: function _initView(container, templates) {
        var _this = this;

        if (!this._view) {

          this.initPaging();

          this._view = new ViewTimers(container, templates, {
            onTimerStopSubmit: function (timer) {
              _this.timerStopSubmit(timer);
              if (_this._callbacks.onTimerStopSubmit) {
                _this._callbacks.onTimerStopSubmit(timer);
              }
              return timer;
            },
            onTimerStopResponse: function (timerData) {
              var result = _this.timerStopResponse(timerData);
              if (_this._callbacks.onTimerStopResponse) {
                _this._callbacks.onTimerStopResponse(result);
              }
              return result;
            },

            onTimerUpdateSubmit: function (timer, members, tagIDs) {
              _this.timerUpdateSubmit(timer, members, tagIDs);
              if (_this._callbacks.onTimerUpdateSubmit) {
                _this._callbacks.onTimerUpdateSubmit(timer);
              }
              return timer;
            },
            onTimerUpdateResponse: function (timerData) {
              var result = _this.timerUpdateResponse(timerData);
              if (_this._callbacks.onTimerUpdateResponse) {
                _this._callbacks.onTimerUpdateResponse(result);
              }
              return result;
            },

            onTimerDeleteSubmit: function (timer) {
              _this.timerDeleteSubmit(timer);
              if (_this._callbacks.onTimerDeleteSubmit) {
                _this._callbacks.onTimerDeleteSubmit(timer);
              }
              return timer;
            },
            onTimerDeleteResponse: function (success) {
              var result = _this.timerDeleteResponse(success);
              if (_this._callbacks.onTimerDeleteResponse) {
                _this._callbacks.onTimerDeleteResponse(success);
              }
              return result;
            },

            onTimerEditOpen: function (id) {
              if (_this._callbacks.onTimerEditOpen) {
                _this._callbacks.onTimerEditOpen(id);
              }
            },

            onTimerEditClose: function (id) {
              if (_this._callbacks.onTimerEditClose) {
                _this._callbacks.onTimerEditClose(id);
              }
            },

            onTimerJobClick: function (timerID, container) {
              _this.timerJobClicked(timerID, container);
            },

            onTimerTagsClick: function (timerID, container) {
              _this.timerTagsClicked(timerID, container);
            },

            onLoadMore: function () {
              _this.incrementPaging();
              _this.getView().loadMore(_this.getViewData());
            }
          });
        }
      },
      writable: true,
      configurable: true
    },
    initPaging: {
      value: function initPaging() {
        this.addExtraData({
          timerPaging: {
            current: 0,
            length: 10
          }
        });
      },
      writable: true,
      configurable: true
    },
    incrementPaging: {
      value: function incrementPaging() {
        this._extraData.timerPaging.current++;
      },
      writable: true,
      configurable: true
    },
    resetPaging: {
      value: function resetPaging() {
        this._extraData.timerPaging.current = 0;
      },
      writable: true,
      configurable: true
    },
    timerStopSubmit: {
      value: function timerStopSubmit(timer) {
        timer.stop();

        this._view.renderElement("timer-list-item--" + timer.getID(), "timer-item", timer, this.getViewData());

        return timer;
      },
      writable: true,
      configurable: true
    },
    timerStopResponse: {
      value: function timerStopResponse(timerData) {
        console.log("timerStopResponse", timerData);
      },
      writable: true,
      configurable: true
    },
    timerUpdateSubmit: {
      value: function timerUpdateSubmit(timer, members, tagIDs) {
        timer.updateMembers(members).setTagIDs(tagIDs);

        //this._view.setDirty('all');
        //this._view.render(this.getViewData());
        this._view.renderElement("timer-list-item--" + timer.getID(), "timer-item", timer, this.getViewData());

        return timer;
      },
      writable: true,
      configurable: true
    },
    timerUpdateResponse: {
      value: function timerUpdateResponse(timerData) {
        console.log("timerUpdateResponse", timerData);
      },
      writable: true,
      configurable: true
    },
    timerDeleteSubmit: {
      value: function timerDeleteSubmit(timer) {
        var success = this._data.grouped.removeTimer(timer);

        this._view.removeElement("timer-list-item--" + timer.getID());

        return success;
      },
      writable: true,
      configurable: true
    },
    timerDeleteResponse: {
      value: function timerDeleteResponse(success) {
        console.log("timerDeleteResponse", success);
      },
      writable: true,
      configurable: true
    },
    timerJobClicked: {
      value: function timerJobClicked(timerID, container) {
        var ctrlr = new ControllerTimerJob({
          timer: this._data.grouped.findTimer(timerID),
          jobs: this._data.grouped.getOrderedJobs()
        }, App.templates, container, {
          onJobSelected: (function () {
            this.jobSelected(ctrlr._data.timer);
          }).bind(this)
        });

        ctrlr.renderView();
      },
      writable: true,
      configurable: true
    },
    timerTagsClicked: {
      value: function timerTagsClicked(timerID, container) {
        var ctrlr = new ControllerTimerTags({
          timer: this._data.grouped.findTimer(timerID),
          tags: this._data.grouped.getOrderedTags()
        }, App.templates, container, {
          onDone: (function () {
            this.tagsSelected(ctrlr._data.timer);
          }).bind(this)
        });

        ctrlr.renderView();
      },
      writable: true,
      configurable: true
    },
    jobSelected: {
      value: function jobSelected(timer) {
        this.getView().renderTimerItemEdit(timer, this.getViewData());
      },
      writable: true,
      configurable: true
    },
    tagsSelected: {
      value: function tagsSelected(timer) {
        this.getView().renderTimerItemEdit(timer, this.getViewData());
      },
      writable: true,
      configurable: true
    }
  });

  return ControllerTimers;
})(Controller);

module.exports = ControllerTimers;

},{"../views/timers":"/Library/WebServer/Documents/tocktick/lib/views/timers.js","./controller":"/Library/WebServer/Documents/tocktick/lib/controllers/controller.js","./timer-job":"/Library/WebServer/Documents/tocktick/lib/controllers/timer-job.js","./timer-tags":"/Library/WebServer/Documents/tocktick/lib/controllers/timer-tags.js"}],"/Library/WebServer/Documents/tocktick/lib/helpers.js":[function(require,module,exports){
"use strict";

//var Handlebars = require('handlebars');

exports.ifnotfalse = ifnotfalse;
exports.ifequal = ifequal;
exports.objcall = objcall;
exports.ifobjcall = ifobjcall;
exports.eachobjcall = eachobjcall;
exports.arrindexprop = arrindexprop;
exports.ifIn = ifIn;

function ifnotfalse(conditional, options) {
  if (conditional !== false) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
}

function ifequal(conditional, equalTo, options) {
  if (conditional === equalTo) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
}

function objcall(obj, call, options) {
  var params = [];
  for (var key in options.hash) {
    params.push(options.hash[key]);
  }
  if (typeof obj[call] === "function") {
    return obj[call].apply(obj, params);
  } else {
    return obj[call];
  }
}

function ifobjcall(obj, call, options) {
  var params = [];
  for (var key in options.hash) {
    params.push(options.hash[key]);
  }

  var result;
  if (typeof obj[call] === "function") {
    result = obj[call].apply(obj, params);
  } else {
    result = obj[call];
  }

  if (result) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
}

function eachobjcall(obj, call, options) {
  var params = [];
  for (var key in options.hash) {
    params.push(options.hash[key]);
  }
  var items = obj[call].apply(obj, params);
  var ret = "";

  for (var i = 0, j = items.length; i < j; i++) {
    ret = ret + options.fn(items[i]);
  }

  return ret;
}

function arrindexprop(arr, index, params) {
  params = params.split(".");
  var item = arr[index];
  for (var i = 0; i < params.length; i++) {
    item = item[params[i]];
  }
  if (typeof item === "function") {
    return item();
  } else {
    return item;
  }
}

function ifIn(elem, arr, options) {
  if (arr.indexOf(elem) > -1) {
    return options.fn(this);
  }
  return options.inverse(this);
}

},{}],"/Library/WebServer/Documents/tocktick/lib/models/authmodel.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var db = require("../redis-db");
var Model = require("./model");

var AuthModel = (function (Model) {
  function AuthModel(members, id, userID) {
    _classCallCheck(this, AuthModel);

    _get(Object.getPrototypeOf(AuthModel.prototype), "constructor", this).call(this, members, id);

    if (userID) {
      this.setUserID(userID);
    }
  }

  _inherits(AuthModel, Model);

  _prototypeProperties(AuthModel, {
    getAllForUser: {
      value: function getAllForUser(userID) {
        var _this2 = this;

        return db.smembers("user:" + userID + ":" + this.getStorageName() + "s").then(function (modelIDs) {
          var promises = [];

          modelIDs.forEach(function (modelID) {
            promises.push(_this2.find(modelID));
          });

          return Promise.all(promises);
        }).then(function (models) {
          return models.filter(function (model) {
            return model !== false;
          });
        });
      },
      writable: true,
      configurable: true
    }
  }, {
    setUserID: {
      value: function setUserID(userID) {
        this.setMember("userID", userID);

        return this;
      },
      writable: true,
      configurable: true
    },
    getUserID: {
      value: function getUserID() {
        return this.getMember("userID");
      },
      writable: true,
      configurable: true
    },
    save: {
      value: function save(userID) {
        var _this2 = this;

        var _this = this;

        userID = userID || this.getUserID();

        if (!userID) {
          return Promise.reject(new Error("Missing user info in save"));
        }

        this.setUserID(userID);

        return this.constructor.find(this.getID()).then(function (model) {
          if (model) {
            return db.sismember("user:" + userID + ":" + _this2.constructor.getStorageName() + "s", _this2.getID()).then(function (isOwned) {
              if (!isOwned) {
                return Promise.reject(new Error("User save mismatch"));
              }
              return true;
            });
          }
          return true;
        }).then(function () {
          return _get(Object.getPrototypeOf(AuthModel.prototype), "save", _this).call(_this).then(function (saved) {
            return db.sadd("user:" + userID + ":" + _this2.constructor.getStorageName() + "s", saved.getID()).then(function () {
              return saved;
            });
          });
        });
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove() {
        var _this2 = this;

        return _get(Object.getPrototypeOf(AuthModel.prototype), "remove", this).call(this).then(function () {
          return db.srem("user:" + _this2.getUserID() + ":" + _this2.constructor.getStorageName() + "s", _this2.getID());
        });
      },
      writable: true,
      configurable: true
    }
  });

  return AuthModel;
})(Model);

module.exports = AuthModel;

},{"../redis-db":"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js","./model":"/Library/WebServer/Documents/tocktick/lib/models/model.js"}],"/Library/WebServer/Documents/tocktick/lib/models/group.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Tag = require("./tag");
var Job = require("./job");
var Timer = require("./timer");

var Group = (function () {
  function Group() {
    _classCallCheck(this, Group);

    this.init();
  }

  _prototypeProperties(Group, {
    fromJSON: {
      value: function fromJSON(jobs, timers, tags) {
        var g = new Group();
        g.loadFromJSON(jobs, timers, tags);

        return g;
      },
      writable: true,
      configurable: true
    },
    fromDB: {
      value: function fromDB(userID) {
        var g = new Group();
        return g.loadFromDB(userID);
      },
      writable: true,
      configurable: true
    }
  }, {
    init: {
      value: function init() {
        this._jobs = {
          all: {},
          ids: [] };

        this._timers = {
          all: {},
          ids: [] };

        this._tags = {
          all: {},
          ids: [] };
      },
      writable: true,
      configurable: true
    },
    loadFromJSON: {
      value: function loadFromJSON(jobs, timers, tags) {
        var _this = this;

        this.init();

        Object.keys(jobs).forEach(function (jobID) {
          var jobData = jobs[jobID];
          var job = new Job(jobData._members, jobID);

          _this.addJob(job);

          jobData._timerIDs.reverse().forEach(function (timerID) {
            var timerData = timers[timerID];
            var timer = new Timer(timerData._members, timerData._tagIDs, timerID);

            _this.addTimer(timer);
          });
        });

        Object.keys(tags).forEach(function (tagID) {
          var tagData = tags[tagID];
          var tag = new Tag(tagData._members, tagID);

          _this.addTag(tag);
        });

        this.sortTimers();
      },
      writable: true,
      configurable: true
    },
    loadFromDB: {
      value: function loadFromDB(userID) {
        var _this = this;

        this.init();

        return Job.getAllForUser(userID).then(function (jobs) {
          var promises = [];
          jobs.forEach(function (job) {
            _this.addJob(job);
            promises.push(job.findTimers());
          });

          _this.sortJobs();

          return Promise.all(promises);
        }).then(function (jobTimers) {
          jobTimers.forEach(function (timers) {
            timers.forEach(function (timer) {
              _this.addTimer(timer);
            });
          });

          _this.sortTimers();

          return;
        }).then(function () {
          return Tag.getAllForUser(userID);
        }).then(function (tags) {
          tags.forEach(function (tag) {
            _this.addTag(tag);
          });

          _this.sortTags();
          return _this;
        }).then(null, function (err) {
          return Promise.reject(new Error(err.stack));
        });
      },
      writable: true,
      configurable: true
    },
    getJobInfo: {
      value: function getJobInfo() {
        return this._jobs;
      },
      writable: true,
      configurable: true
    },
    getTimerInfo: {
      value: function getTimerInfo() {
        return this._timers;
      },
      writable: true,
      configurable: true
    },
    getTagInfo: {
      value: function getTagInfo() {
        return this._tags;
      },
      writable: true,
      configurable: true
    },
    getJobs: {
      value: function getJobs() {
        return this._jobs.all;
      },
      writable: true,
      configurable: true
    },
    getJobIDs: {
      value: function getJobIDs() {
        return this._jobs.ids;
      },
      writable: true,
      configurable: true
    },
    getTags: {
      value: function getTags() {
        return this._tags.all;
      },
      writable: true,
      configurable: true
    },
    getTagIDs: {
      value: function getTagIDs() {
        return this._tags.ids;
      },
      writable: true,
      configurable: true
    },
    getTimers: {
      value: function getTimers() {
        return this._timers.all;
      },
      writable: true,
      configurable: true
    },
    getTimerIDs: {
      value: function getTimerIDs() {
        return this._timers.ids;
      },
      writable: true,
      configurable: true
    },
    sortTimers: {
      value: function sortTimers() {
        var _this = this;

        this._timers.ids.sort(function (a, b) {
          var aStart = _this._timers.all[a].getStartTime();
          var bStart = _this._timers.all[b].getStartTime();

          if (aStart < bStart) {
            return 1;
          }
          if (aStart > bStart) {
            return -1;
          }
          return 0;
        });
      },
      writable: true,
      configurable: true
    },
    sortTags: {
      value: function sortTags() {
        var _this = this;

        this._tags.ids.sort(function (a, b) {
          var aName = _this._tags.all[a].getName();
          var bName = _this._tags.all[b].getName();

          if (aName < bName) {
            return 1;
          }
          if (aName > bName) {
            return -1;
          }
          return 0;
        });
      },
      writable: true,
      configurable: true
    },
    sortJobs: {
      value: function sortJobs() {
        var _this = this;

        this._jobs.ids.sort(function (a, b) {
          var aStart = _this._jobs.all[a].getDateAdded();
          var bStart = _this._jobs.all[b].getDateAdded();

          if (aStart < bStart) {
            return 1;
          }
          if (aStart > bStart) {
            return -1;
          }
          return 0;
        });
      },
      writable: true,
      configurable: true
    },
    getOrderedTimers: {
      value: function getOrderedTimers(page, length) {
        var _this = this;

        var idSlice = this._timers.ids.slice(page * length, page * length + length);
        var ordered = [];

        idSlice.forEach(function (id) {
          ordered.push(_this._timers.all[id]);
        });

        return ordered;
      },
      writable: true,
      configurable: true
    },
    getCurrentTimers: {
      value: function getCurrentTimers(page, length) {
        var _this = this;

        var runningTimers = [];
        this._timers.ids.forEach(function (id) {
          if (_this._timers.all[id].isRunning()) {
            runningTimers.push(_this._timers.all[id]);
          }
        });

        return runningTimers.slice(page * length, length);
      },
      writable: true,
      configurable: true
    },
    getNumCurrentTimers: {
      value: function getNumCurrentTimers() {
        var _this = this;

        var count = 0;

        this._timers.ids.forEach(function (id) {
          if (_this._timers.all[id].isRunning()) {
            count++;
          }
        });

        return count;
      },
      writable: true,
      configurable: true
    },
    getOrderedJobTimers: {
      value: function getOrderedJobTimers(jobID) {
        var _this = this;

        var ordered = [];

        this._jobs.all[jobID].getTimerIDs().forEach(function (timerID) {
          ordered.push(_this._timers.all[timerID]);
        });

        return ordered;
      },
      writable: true,
      configurable: true
    },
    getOrderedJobs: {
      value: function getOrderedJobs(limit) {
        var _this = this;

        var ordered = [];

        var count = 0;
        this._jobs.ids.forEach(function (id) {
          if (!limit || count < limit) {
            ordered.push(_this._jobs.all[id]);
          }
          count++;
        });

        return ordered;
      },
      writable: true,
      configurable: true
    },
    getOrderedTags: {
      value: function getOrderedTags() {
        var _this = this;

        var ordered = [];

        this._tags.ids.forEach(function (id) {
          ordered.push(_this._tags.all[id]);
        });

        return ordered;
      },
      writable: true,
      configurable: true
    },
    getOrderedTimerTags: {
      value: function getOrderedTimerTags(timerID) {
        var _this = this;

        var ordered = [];

        this._timers.all[timerID].getTagIDs().forEach(function (tagID) {
          ordered.push(_this._tags.all[tagID]);
        });

        return ordered;
      },
      writable: true,
      configurable: true
    },
    timerExists: {
      value: function timerExists(timerID) {
        return !!this._timers.all[timerID];
      },
      writable: true,
      configurable: true
    },
    findTimer: {
      value: function findTimer(timerID) {
        if (this.timerExists(timerID)) {
          return this._timers.all[timerID];
        } else {
          return false;
        }
      },
      writable: true,
      configurable: true
    },
    tagExists: {
      value: function tagExists(tagID) {
        return !!this._tags.all[tagID];
      },
      writable: true,
      configurable: true
    },
    findTag: {
      value: function findTag(tagID) {
        if (this.tagExists(tagID)) {
          return this._tags.all[tagID];
        } else {
          return false;
        }
      },
      writable: true,
      configurable: true
    },
    jobExists: {
      value: function jobExists(jobID) {
        return !!this._jobs.all[jobID];
      },
      writable: true,
      configurable: true
    },
    findJob: {
      value: function findJob(jobID) {
        if (this.jobExists(jobID)) {
          return this._jobs.all[jobID];
        } else {
          return false;
        }
      },
      writable: true,
      configurable: true
    },
    getMostRecentTimer: {
      value: function getMostRecentTimer() {
        if (this._timers.ids.length) {
          return this.getOrderedTimers()[0];
        } else {
          return false;
        }
      },
      writable: true,
      configurable: true
    },
    getMostRecentJob: {
      value: function getMostRecentJob() {
        if (this._jobs.ids.length) {
          return this.getOrderedJobs()[0];
        } else {
          return false;
        }
      },
      writable: true,
      configurable: true
    },
    addTag: {
      value: function addTag(tag) {
        this._tags.all[tag.getID()] = tag;
        this._tags.ids.unshift(tag.getID());
      },
      writable: true,
      configurable: true
    },
    removeTag: {
      value: function removeTag(tag) {
        var _this = this;

        this._timers.ids.forEach(function (timerID) {
          var timer = _this._timers.all[timerID];
          var tagIDs = timer.getTagIDs();
          var index = tagIDs.indexOf(tag.getID());
          if (index > -1) {
            tagIDs.splice(index, 1);
            timer.setTagIDs(tagIDs);
          }
        });

        var index = this._tags.ids.indexOf(tag.getID());
        if (index > -1) {
          this._tags.ids.splice(index, 1);
        }
        delete this._tags.all[tag.getID()];
      },
      writable: true,
      configurable: true
    },
    addJob: {
      value: function addJob(job) {
        this._jobs.all[job.getID()] = job;
        this._jobs.ids.unshift(job.getID());
      },
      writable: true,
      configurable: true
    },
    removeJob: {
      value: function removeJob(job) {
        var _this = this;

        var timersToRemove = [];
        this._timers.ids.forEach(function (timerID) {
          var timer = _this._timers.all[timerID];
          if (timer.getJobID() === job.getID()) {
            timersToRemove.push(timer);
          }
        });

        timersToRemove.forEach(function (timer) {
          _this.removeTimer(timer);
        });

        var index = this._jobs.ids.indexOf(job.getID());
        if (index > -1) {
          this._jobs.ids.splice(index, 1);
        }
        delete this._jobs.all[job.getID()];
      },
      writable: true,
      configurable: true
    },
    addOrUpdateTimer: {
      value: function addOrUpdateTimer(timer) {
        if (this._timers.all[timer.getID()]) {
          this.updateTimer(timer);
        } else {
          this.addTimer(timer);
        }
      },
      writable: true,
      configurable: true
    },
    addTimer: {
      value: function addTimer(timer) {
        this._timers.all[timer.getID()] = timer;
        this._timers.ids.unshift(timer.getID());

        this._jobs.all[timer.getMember("jobID")].addTimerID(timer.getID());
      },
      writable: true,
      configurable: true
    },
    updateTimer: {
      value: function updateTimer(timer) {
        this._timers.all[timer.getID()] = timer;
      },
      writable: true,
      configurable: true
    },
    removeTimer: {
      value: function removeTimer(timer) {
        var index = this._timers.ids.indexOf(timer.getID());
        if (index > -1) {
          this._timers.ids.splice(index, 1);
        }

        this._jobs.all[timer.getMember("jobID")].removeTimerID(timer.getID());

        delete this._timers.all[timer.getID()];
      },
      writable: true,
      configurable: true
    },
    startNewTimer: {
      value: function startNewTimer(timerData, tagIDs) {
        var timer = undefined;

        if (!timerData.jobID) {
          var recentTimer = this.getMostRecentTimer();

          var jobID = undefined;
          if (!recentTimer) {
            var recentJob = this.getMostRecentJob();
            jobID = recentJob.getID();
          } else {
            jobID = recentTimer.getMember("jobID");
          }

          timer = new Timer({
            jobID: jobID
          });
        } else {
          timer = new Timer(timerData);
        }

        timer.setTagIDs(tagIDs);

        this.addTimer(timer);

        timer.start();

        return timer;
      },
      writable: true,
      configurable: true
    },
    stopTimer: {
      value: function stopTimer(timer) {
        timer.stop();

        return timer;
      },
      writable: true,
      configurable: true
    }
  });

  return Group;
})();

module.exports = Group;

},{"./job":"/Library/WebServer/Documents/tocktick/lib/models/job.js","./tag":"/Library/WebServer/Documents/tocktick/lib/models/tag.js","./timer":"/Library/WebServer/Documents/tocktick/lib/models/timer.js"}],"/Library/WebServer/Documents/tocktick/lib/models/hastimersmodel.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var db = require("../redis-db");
var AuthModel = require("./authmodel");

var HasTimersModel = (function (AuthModel) {
  function HasTimersModel(members, id, userID) {
    _classCallCheck(this, HasTimersModel);

    _get(Object.getPrototypeOf(HasTimersModel.prototype), "constructor", this).call(this, members, id, userID);
    this._timerIDs = [];
  }

  _inherits(HasTimersModel, AuthModel);

  _prototypeProperties(HasTimersModel, null, {
    setTimerIDs: {
      value: function setTimerIDs(timerIDs) {
        this._timerIDs = timerIDs;
      },
      writable: true,
      configurable: true
    },
    addTimerID: {
      value: function addTimerID(timerID) {
        this._timerIDs.unshift(timerID);
      },
      writable: true,
      configurable: true
    },
    removeTimerID: {
      value: function removeTimerID(timerID) {
        var index = this._timerIDs.indexOf(timerID);
        if (index > -1) {
          this._timerIDs.splice(index, 1);
        }
      },
      writable: true,
      configurable: true
    },
    getTimerIDs: {
      value: function getTimerIDs() {
        return this._timerIDs;
      },
      writable: true,
      configurable: true
    },
    findTimers: {
      value: function findTimers() {
        var Timer = require("./timer");

        return db.smembers(this.constructor.getStorageName() + ":" + this.getID() + ":timers").then(function (timerIDs) {
          var promises = [];

          timerIDs.forEach(function (timerID) {
            promises.push(Timer.find(timerID));
          });

          return Promise.all(promises);
        });
      },
      writable: true,
      configurable: true
    },
    findRunningTimers: {
      value: function findRunningTimers() {
        return this.findTimers().then(function (timers) {
          return timers.filter(function (timer) {
            return timer.isRunning();
          });
        });
      },
      writable: true,
      configurable: true
    },
    findStoppedTimers: {
      value: function findStoppedTimers() {
        return this.findTimers().then(function (timers) {
          return timers.filter(function (timer) {
            return timer.isStopped();
          });
        });
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove() {
        var _this = this;

        return this.findTimers().then(function (timers) {
          var promises = [];

          timers.forEach(function (timer) {
            promises.push(timer.remove());
          });

          return Promise.all(promises);
        }).then(function () {
          return _get(Object.getPrototypeOf(HasTimersModel.prototype), "remove", _this).call(_this);
        });
      },
      writable: true,
      configurable: true
    }
  });

  return HasTimersModel;
})(AuthModel);

module.exports = HasTimersModel;

},{"../redis-db":"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js","./authmodel":"/Library/WebServer/Documents/tocktick/lib/models/authmodel.js","./timer":"/Library/WebServer/Documents/tocktick/lib/models/timer.js"}],"/Library/WebServer/Documents/tocktick/lib/models/job.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var HasTimersModel = require("./hastimersmodel");

var Job = (function (HasTimersModel) {
  function Job() {
    _classCallCheck(this, Job);

    if (HasTimersModel != null) {
      HasTimersModel.apply(this, arguments);
    }
  }

  _inherits(Job, HasTimersModel);

  _prototypeProperties(Job, null, {
    getName: {
      value: function getName() {
        return this.getMember("name");
      },
      writable: true,
      configurable: true
    }
  });

  return Job;
})(HasTimersModel);

module.exports = Job;

},{"./hastimersmodel":"/Library/WebServer/Documents/tocktick/lib/models/hastimersmodel.js"}],"/Library/WebServer/Documents/tocktick/lib/models/model.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var db = require("../redis-db");
var shortId = require("shortid");

var Model = (function () {
  function Model(members, id) {
    _classCallCheck(this, Model);

    this.setMembers(members);

    if (id) {
      this.setID(id);
    } else {
      this.setID(shortId.generate());
    }

    if (!members || !members.dateAdded) {
      this._members.dateAdded = new Date().getTime();
    }
  }

  _prototypeProperties(Model, {
    construct: {
      value: function construct(members, id) {
        return new this(members, id);
      },
      writable: true,
      configurable: true
    },
    getStorageName: {
      value: function getStorageName() {
        return this.name.toLowerCase();
      },
      writable: true,
      configurable: true
    },
    removeById: {
      value: function removeById(id) {
        var _this = this;

        return db.del(this.getStorageName() + ":" + id).then(function () {
          return db.srem(_this.getStorageName() + "s:ids", id);
        });
      },
      writable: true,
      configurable: true
    },
    find: {
      value: function find(id) {
        var _this = this;

        return db.hgetall(this.getStorageName() + ":" + id).then(function (members) {
          if (members) {
            return _this.construct(members, id);
          } else {
            return false;
          }
        });
      },
      writable: true,
      configurable: true
    },
    exists: {
      value: function exists(id) {
        return db.sismember(this.getStorageName() + "s:ids", id);
      },
      writable: true,
      configurable: true
    }
  }, {
    setID: {
      value: function setID(id) {
        this._id = id;

        return this;
      },
      writable: true,
      configurable: true
    },
    getID: {
      value: function getID() {
        return this._id;
      },
      writable: true,
      configurable: true
    },
    setMembers: {
      value: function setMembers(members) {
        this._members = members || {};

        return this;
      },
      writable: true,
      configurable: true
    },
    updateMembers: {
      value: function updateMembers(members) {
        for (var _name in members) {
          this._members[_name] = members[_name];
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    getMembers: {
      value: function getMembers() {
        return this._members;
      },
      writable: true,
      configurable: true
    },
    setMember: {
      value: function setMember(name, value) {
        this._members[name] = value;

        return this;
      },
      writable: true,
      configurable: true
    },
    getMember: {
      value: function getMember(name) {
        return this._members[name];
      },
      writable: true,
      configurable: true
    },
    getDateAdded: {
      value: function getDateAdded() {
        return this._members.dateAdded;
      },
      writable: true,
      configurable: true
    },
    save: {
      value: function save() {
        var _this = this;

        if (!this.getID()) {
          this.setID(shortId.generate());
        }

        return db.hmset(this.constructor.getStorageName() + ":" + this.getID(), this.getMembers()).then(function () {
          return db.sadd(_this.constructor.getStorageName() + "s:ids", _this.getID()).then(function () {
            return _this;
          });
        }).then(function () {
          return _this;
        });
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove() {
        return this.constructor.removeById(this.getID());
      },
      writable: true,
      configurable: true
    }
  });

  return Model;
})();

module.exports = Model;

},{"../redis-db":"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js","shortid":"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/shortid.js"}],"/Library/WebServer/Documents/tocktick/lib/models/tag.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var HasTimersModel = require("./hastimersmodel");

var Tag = (function (HasTimersModel) {
  function Tag() {
    _classCallCheck(this, Tag);

    if (HasTimersModel != null) {
      HasTimersModel.apply(this, arguments);
    }
  }

  _inherits(Tag, HasTimersModel);

  _prototypeProperties(Tag, null, {
    getName: {
      value: function getName() {
        return this.getMember("name");
      },
      writable: true,
      configurable: true
    }
  });

  return Tag;
})(HasTimersModel);

module.exports = Tag;

},{"./hastimersmodel":"/Library/WebServer/Documents/tocktick/lib/models/hastimersmodel.js"}],"/Library/WebServer/Documents/tocktick/lib/models/timer.js":[function(require,module,exports){
"use strict";

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var db = require("../redis-db");
var AuthModel = require("./authmodel");
var Tag = require("./tag");
var Job = require("./job");

var moment = require("moment");

var Timer = (function (AuthModel) {
  function Timer(members, tagIDs, id, userID) {
    _classCallCheck(this, Timer);

    _get(Object.getPrototypeOf(Timer.prototype), "constructor", this).call(this, members, id, userID);

    this.setTagIDs(tagIDs);
  }

  _inherits(Timer, AuthModel);

  _prototypeProperties(Timer, {
    construct: {
      value: function construct(members, id) {
        return new this(members, [], id);
      },
      writable: true,
      configurable: true
    },
    formatDuration: {
      value: function formatDuration(milliseconds, shortFormat) {
        var m = new moment.duration(milliseconds);

        var parts = [{
          name: "year",
          value: m.years()
        }, {
          name: "month",
          value: m.months()
        }, {
          name: "week",
          value: m.weeks()
        }, {
          name: "day",
          value: m.days()
        }, {
          name: "hour",
          value: m.hours()
        }, {
          name: "minute",
          value: m.minutes()
        }, {
          name: "second",
          value: m.seconds()
        }];

        var time = "";
        parts.forEach(function (part) {
          if (part.value > 0 || part.name === "second") {
            time += " " + part.value;
            if (shortFormat) {
              time += part.name.substring(0, 1);
            } else {
              time += " " + part.name;
              if (part.value !== 1) {
                time += "s";
              }
            }
          }
        });

        return time.trim();
      },
      writable: true,
      configurable: true
    },
    formatTime: {
      value: function formatTime(timestamp) {
        var m = new moment(timestamp);
        return m.calendar();
      },
      writable: true,
      configurable: true
    },
    getCurrentTime: {
      value: function getCurrentTime() {
        return new Date().getTime();
      },
      writable: true,
      configurable: true
    },
    find: {
      value: function find(id) {
        return _get(Object.getPrototypeOf(Timer), "find", this).call(this, id).then(function (timer) {
          if (timer) {
            return Promise.all([timer, timer.findTags()]);
          } else {
            return false;
          }
        }).then(function (result) {
          if (result) {
            var _result = _slicedToArray(result, 2);

            var timer = _result[0];
            var tags = _result[1];

            var tagIDs = tags.map(function (tag) {
              return tag.getID();
            });
            timer.setTagIDs(tagIDs);

            return timer;
          } else {
            return false;
          }
        });
      },
      writable: true,
      configurable: true
    },
    getMostRecent: {
      value: function getMostRecent(userID) {
        return db.smembers("user:" + userID + ":timers").then(function (timerIds) {
          if (!timerIds) {
            return false;
          } else {
            var _ret = (function () {
              var promises = [];
              timerIds.forEach(function (timerID) {
                promises.push(Timer.find(timerID));
              });
              return {
                v: Promise.all(promises).then(function (timers) {
                  timers.sort(function (a, b) {
                    if (a.getDateAdded() < b.getDateAdded()) {
                      return 1;
                    }
                    if (a.getDateAdded() < b.getDateAdded()) {
                      return -1;
                    }
                    return 0;
                  });

                  return timers[0];
                })
              };
            })();

            if (typeof _ret === "object") return _ret.v;
          }
        });
      },
      writable: true,
      configurable: true
    }
  }, {
    setTagIDs: {
      value: function setTagIDs(tagIDs) {
        this._tagIDs = tagIDs || [];

        return this;
      },
      writable: true,
      configurable: true
    },
    getTagIDs: {
      value: function getTagIDs() {
        return this._tagIDs;
      },
      writable: true,
      configurable: true
    },
    setJobID: {
      value: function setJobID(jobID) {
        this.setMember("jobID", jobID);
      },
      writable: true,
      configurable: true
    },
    getJobID: {
      value: function getJobID() {
        return this.getMember("jobID");
      },
      writable: true,
      configurable: true
    },
    getDescription: {
      value: function getDescription() {
        return this.getMember("description");
      },
      writable: true,
      configurable: true
    },
    getStartTime: {
      value: function getStartTime() {
        return parseInt(this.getMember("start"), 0);
      },
      writable: true,
      configurable: true
    },
    getStopTime: {
      value: function getStopTime() {
        return parseInt(this.getMember("stop"), 0);
      },
      writable: true,
      configurable: true
    },
    getDuration: {
      value: function getDuration() {
        var start = this.getStartTime();
        var stop = this.getStopTime();

        if (start) {
          if (stop) {
            return stop - start;
          } else {
            return this.constructor.getCurrentTime() - start;
          }
        } else {
          return 0;
        }
      },
      writable: true,
      configurable: true
    },
    getFormattedStartTime: {
      value: function getFormattedStartTime() {
        return this.constructor.formatTime(this.getStartTime());
      },
      writable: true,
      configurable: true
    },
    getFormattedStopTime: {
      value: function getFormattedStopTime() {
        return this.constructor.formatTime(this.getStopTime());
      },
      writable: true,
      configurable: true
    },
    getFormattedDuration: {
      value: function getFormattedDuration(shortFormat) {
        return this.constructor.formatDuration(this.getDuration(), shortFormat);
      },
      writable: true,
      configurable: true
    },
    adjustDurationFromStart: {
      value: function adjustDurationFromStart(duration) {
        var start = this.getStartTime();
        var stop = this.getStopTime();

        if (start && stop) {
          this.stop(start + duration, true);
        }
      },
      writable: true,
      configurable: true
    },
    adjustDurationFromStop: {
      value: function adjustDurationFromStop(duration) {
        var start = this.getStartTime();
        var stop = this.getStopTime();

        if (start && stop) {
          this.start(stop - duration, true);
        }
      },
      writable: true,
      configurable: true
    },
    start: {
      value: function start(startTime, force) {
        if (!this.getStartTime() || force) {
          this.setMember("start", startTime || this.constructor.getCurrentTime());
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    restart: {
      value: function restart() {
        this.start(this.constructor.getCurrentTime(), true);
      },
      writable: true,
      configurable: true
    },
    stop: {
      value: function stop(stopTime, force) {
        if (this.getStartTime() && (!this.getStopTime() || force)) {
          if (typeof stopTime === "undefined") {
            stopTime = this.constructor.getCurrentTime();
          }

          this.setMember("stop", stopTime);
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    unstop: {
      value: function unstop() {
        this.stop(null, true);
      },
      writable: true,
      configurable: true
    },
    isStarted: {
      value: function isStarted() {
        return !!this.getStartTime();
      },
      writable: true,
      configurable: true
    },
    isStopped: {
      value: function isStopped() {
        return !!this.getStopTime();
      },
      writable: true,
      configurable: true
    },
    isRunning: {
      value: function isRunning() {
        return this.isStarted() && !this.isStopped();
      },
      writable: true,
      configurable: true
    },
    save: {
      value: function save(userID, jobID, currentJobID) {
        var _this = this;

        currentJobID = currentJobID || this.getMember("jobID");

        if (typeof jobID !== "undefined") {
          this.setMember("jobID", jobID);
        } else {
          jobID = currentJobID;
        }

        return _get(Object.getPrototypeOf(Timer.prototype), "save", this).call(this, userID).then(function () {
          return _this.assignToJob(jobID, currentJobID);
        }).then(function () {
          return _this.assignTags(_this.getTagIDs());
        }).then(function () {
          return _this;
        });
      },
      writable: true,
      configurable: true
    },
    assignTags: {
      value: function assignTags(tagIDs) {
        var _this = this;

        return db.del(this.constructor.getStorageName() + ":" + this.getID() + ":tags").then(function () {
          if (tagIDs.length) {
            return db.sadd(_this.constructor.getStorageName() + ":" + _this.getID() + ":tags", tagIDs);
          } else {
            return;
          }
        });
      },
      writable: true,
      configurable: true
    },
    assignToJob: {
      value: function assignToJob(jobID, oldJobID) {
        var _this = this;

        var promises = [];

        if (jobID) {
          promises.push(db.srem("job:" + jobID + ":timers", 1, this.getID()).then(function () {
            db.sadd("job:" + jobID + ":timers", _this.getID());
          }));
        }

        if (oldJobID && oldJobID !== jobID) {
          promises.push(db.srem("job:" + oldJobID + ":timers", 1, this.getID()));
        }

        return Promise.all(promises);
      },
      writable: true,
      configurable: true
    },
    getJob: {
      value: function getJob() {
        var jobID = this.getMember("jobID");
        if (jobID) {
          return Job.find(jobID);
        } else {
          return Promise.resolve(false);
        }
      },
      writable: true,
      configurable: true
    },
    findTags: {
      value: function findTags() {
        return db.smembers(this.constructor.getStorageName() + ":" + this.getID() + ":tags").then(function (tagIDs) {
          var promises = [];

          tagIDs.forEach(function (tagID) {
            promises.push(Tag.find(tagID));
          });

          return Promise.all(promises).then(function (tags) {
            return tags.filter(function (tag) {
              return tag !== false;
            });
          });
        });
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove() {
        var _this = this;

        return _get(Object.getPrototypeOf(Timer.prototype), "remove", this).call(this).then(function () {
          return db.srem("job:" + _this.getMember("jobID") + ":timers", 1, _this.getID());
        }).then(function () {
          return db.del(_this.constructor.getStorageName() + ":" + _this.getID() + ":tags");
        });
      },
      writable: true,
      configurable: true
    }
  });

  return Timer;
})(AuthModel);

module.exports = Timer;

},{"../redis-db":"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js","./authmodel":"/Library/WebServer/Documents/tocktick/lib/models/authmodel.js","./job":"/Library/WebServer/Documents/tocktick/lib/models/job.js","./tag":"/Library/WebServer/Documents/tocktick/lib/models/tag.js","moment":"/Library/WebServer/Documents/tocktick/node_modules/moment/moment.js"}],"/Library/WebServer/Documents/tocktick/lib/offline.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var request = require("then-request");

var Offline = (function () {
  function Offline() {
    _classCallCheck(this, Offline);
  }

  _prototypeProperties(Offline, {
    saveLocal: {
      value: function saveLocal(jobs, timers, tags) {
        localStorage.setItem("groupedData", JSON.stringify({
          jobs: jobs,
          timers: timers,
          tags: tags }));
      },
      writable: true,
      configurable: true
    },
    loadLocal: {
      value: function loadLocal() {
        var saved = localStorage.getItem("groupedData");

        if (saved) {
          return JSON.parse(saved);
        }

        return false;
      },
      writable: true,
      configurable: true
    },
    isOnline: {
      value: function isOnline() {
        return navigator.onLine;
      },
      writable: true,
      configurable: true
    },
    isOffline: {
      value: function isOffline() {
        return !navigator.onLine;
      },
      writable: true,
      configurable: true
    },
    getGrouped: {
      value: function getGrouped() {
        return request("get", "/api/group", {}).then(function (res) {
          return JSON.parse(res.getBody());
        }, function (err) {
          Error(err);
          console.log("get group api error: ", err);
        });
      },
      writable: true,
      configurable: true
    }
  });

  return Offline;
})();

module.exports = Offline;

},{"then-request":"/Library/WebServer/Documents/tocktick/node_modules/then-request/browser.js"}],"/Library/WebServer/Documents/tocktick/lib/router-main.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Router = require("./router");

var qsParse = require("qs").parse;

var RouterAccount = require("./routers/account");
var RouterFront = require("./routers/front");
var RouterTimers = require("./routers/timers");

var ControllerApp = require("./controllers/app");
var ControllerNav = require("./controllers/nav");
var ControllerFront = require("./controllers/front");
var ControllerTimers = require("./controllers/timers");
var ControllerAccount = require("./controllers/account");

var Group = require("./models/group");
var Timer = require("./models/timer");

var Offline = require("./offline");

var RouterMain = (function () {
  function RouterMain(user, templates) {
    _classCallCheck(this, RouterMain);

    this._data = {
      user: user,
      templates: templates,
      jobs: {},
      timers: {},
      tags: {}
    };
  }

  _prototypeProperties(RouterMain, {
    getInstance: {
      value: function getInstance(user, templates) {
        if (!RouterMain.instance) {
          RouterMain.instance = new RouterMain(user, templates);
        }

        return RouterMain.instance;
      },
      writable: true,
      configurable: true
    }
  }, {
    getQueryParams: {
      value: function getQueryParams() {
        var query = location.search;
        if (query) {
          query = qsParse(query.substring(1));
        } else {
          query = {};
        }

        return query;
      },
      writable: true,
      configurable: true
    },
    offlineSave: {
      value: function offlineSave() {
        Offline.saveLocal(this._data.grouped.getJobs(), this._data.grouped.getTimers(), this._data.grouped.getTags());
      },
      writable: true,
      configurable: true
    },
    checkOfflineStatus: {
      value: function checkOfflineStatus() {

        if (Offline.isOnline()) {

          return Offline.getGrouped().then(function (grouped) {
            Offline.saveLocal(grouped._jobs.all, grouped._timers.all, grouped._tags.all);

            return {
              jobs: grouped._jobs.all,
              timers: grouped._timers.all,
              tags: grouped._tags.all
            };
          });
        } else {

          var savedData = Offline.loadLocal();
          var result = {
            jobs: [],
            timers: [],
            tags: [] };
          if (savedData) {
            result.jobs = savedData.jobs;
            result.timers = savedData.timers;
            result.tags = savedData.tags;
          }

          return Promise.resolve(result);
        }
      },
      writable: true,
      configurable: true
    },
    init: {
      value: function init() {
        var _this = this;

        return this.checkOfflineStatus().then(function (data) {

          _this._currentController = null;

          _this._data.grouped = Group.fromJSON(data.jobs, data.timers, data.tags);
          _this.controllers = {};

          _this.controllers.nav = new ControllerNav(_this._data, _this._data.templates, document.getElementById("view-nav"), {
            onTimerStartSubmit: function () {
              console.log("timer started from nav");
              _this.offlineSave();
              _this.router.navigate("/timers");
            },
            onLinkClicked: function (path) {
              _this.router.navigate(path);
            }
          });

          _this.controllers.app = new ControllerApp(_this._data, _this._data.templates, document.getElementById("view"), {
            onTimerStartSubmit: function (timer) {
              console.log("timer started", timer);
              _this.controllers.nav.getView().setDirty("nav-timer");
              _this.controllers.nav.renderView();
              _this.offlineSave();
            } });

          /*
          if(this._data.user) {
            var port = location.port ? ':' + location.port : '';
            var socket = io(port + '/user');
            socket.emit('userID', this._data.user._id);
             socket.on('timerUpdated', timer => {
              this.controllers.app.addOrUpdateTimer(timer);
               this._currentController.getView().setDirty('all');
              this._currentController.renderView();
               this.controllers.nav.getView().setDirty('nav-timer');
              this.controllers.nav.renderView();
               this.offlineSave();
            });
             socket.on('timerDeleted', timer => {
              this.controllers.app.removeTimer(timer);
               this._currentController.getView().setDirty('all');
              this._currentController.renderView();
               this.controllers.nav.getView().setDirty('nav-timer');
              this.controllers.nav.renderView();
               this.offlineSave();
            });
          }
          */

          _this.router = Router.add(/account(?:$|\/(.+))/i, function (preRendered, match) {

            _this.controllers.nav.setData({
              current: "account"
            });

            if (!_this.controllers.account) {
              _this.controllers.account = new ControllerAccount(_this._data, _this._data.templates, document.getElementById("view"), {
                onJobDeleteSubmit: function (job) {
                  _this.controllers.nav.getView().setDirty("nav-timer");
                  _this.controllers.nav.renderView(preRendered);
                }
              });
            }

            _this._currentController = _this.controllers.account;

            _this.controllers.app.addExtraData({
              view: _this.controllers.account.getViewData(),
              nav: _this.controllers.nav.getViewData()
            });

            RouterAccount.match(match, _this.getQueryParams(), function (matched) {
              _this.controllers.account.getView().setDirty("all");
              _this.controllers.account.renderView(preRendered);

              _this.controllers.nav.getView().setDirty("nav");
              _this.controllers.nav.renderView(preRendered);
            }, function (err) {
              Error(err);
              console.log("account route error: ", err);
            });
          }).add(/timers(?:$|\/(.+))/i, function (preRendered, match) {

            _this.controllers.nav.setData({
              current: "timers"
            });

            if (!_this.controllers.timers) {
              _this.controllers.timers = new ControllerTimers(_this._data, _this._data.templates, document.getElementById("view"), {
                onTimerStopSubmit: function (timer) {
                  _this.controllers.nav.getView().setDirty("nav-timer");
                  _this.controllers.nav.renderView();
                  _this.offlineSave();
                },
                onTimerDeleteSubmit: function (timer) {
                  _this.controllers.nav.getView().setDirty("nav-timer");
                  _this.controllers.nav.renderView();
                  _this.offlineSave();
                  _this.router.update("/timers");
                },

                onTimerUpdateSubmit: function () {
                  _this.offlineSave();
                  _this.router.update("/timers");
                },

                onTimerEditOpen: function (id) {
                  _this.router.update("/timers/edit/" + id);
                },
                onTimerEditClose: function (id) {
                  _this.router.update("/timers");
                }
              });
            }

            _this.controllers.timers.resetPaging();

            _this._currentController = _this.controllers.timers;

            _this.controllers.app.addExtraData({
              view: _this.controllers.timers.getViewData(),
              nav: _this.controllers.nav.getViewData()
            });

            RouterTimers.match(match, _this.getQueryParams(), function (matched) {
              _this.controllers.nav.getView().setDirty("nav");
              _this.controllers.nav.renderView(preRendered);

              _this.controllers.timers.getView().setDirty("all");
              _this.controllers.timers.renderView(preRendered);
            }, function (err) {
              Error(err);
              console.log("timers route error: ", err);
            });
          }).add(/(?:$|\/(.*))/i, function (preRendered, match) {

            _this.controllers.nav.setData({
              current: "front"
            });

            if (!_this.controllers.front) {
              _this.controllers.front = new ControllerFront({
                user: _this._data.user,
                grouped: _this._data.grouped,
                timer: new Timer()
              }, _this._data.templates, document.getElementById("view"), {
                onTimerStartSubmit: function (timer) {
                  console.log("timer started", timer);
                  _this.controllers.nav.getView().setDirty("nav-timer");
                  _this.controllers.nav.renderView();
                  _this.offlineSave();
                } });
            }

            _this._currentController = _this.controllers.front;

            _this.controllers.app.addExtraData({
              view: _this.controllers.front.getViewData(),
              nav: _this.controllers.nav.getViewData()
            });

            RouterFront.match(match, _this.getQueryParams(), function (matched) {
              _this.controllers.front.getView().setDirty("all");
              _this.controllers.front.renderView(preRendered);

              _this.controllers.nav.getView().setDirty("nav");
              _this.controllers.nav.renderView(preRendered);
            }, function (err) {
              Error(err);
              console.log("front route error: ", err);
            });
          }).add(function () {
            console.log("default");
          }).listen();
        });
      },
      writable: true,
      configurable: true
    }
  });

  return RouterMain;
})();

module.exports = RouterMain.getInstance;

},{"./controllers/account":"/Library/WebServer/Documents/tocktick/lib/controllers/account.js","./controllers/app":"/Library/WebServer/Documents/tocktick/lib/controllers/app.js","./controllers/front":"/Library/WebServer/Documents/tocktick/lib/controllers/front.js","./controllers/nav":"/Library/WebServer/Documents/tocktick/lib/controllers/nav.js","./controllers/timers":"/Library/WebServer/Documents/tocktick/lib/controllers/timers.js","./models/group":"/Library/WebServer/Documents/tocktick/lib/models/group.js","./models/timer":"/Library/WebServer/Documents/tocktick/lib/models/timer.js","./offline":"/Library/WebServer/Documents/tocktick/lib/offline.js","./router":"/Library/WebServer/Documents/tocktick/lib/router.js","./routers/account":"/Library/WebServer/Documents/tocktick/lib/routers/account.js","./routers/front":"/Library/WebServer/Documents/tocktick/lib/routers/front.js","./routers/timers":"/Library/WebServer/Documents/tocktick/lib/routers/timers.js","qs":"/Library/WebServer/Documents/tocktick/node_modules/qs/index.js"}],"/Library/WebServer/Documents/tocktick/lib/router.js":[function(require,module,exports){
"use strict";

var Router = {
    routes: [],
    root: "/",

    getFragment: function getFragment() {
        var fragment = "";

        fragment = this.clearSlashes(decodeURI(window.location.pathname + window.location.search));
        fragment = fragment.replace(/\?(.*)$/, "");
        fragment = this.root !== "/" ? fragment.replace(this.root, "") : fragment;

        return this.clearSlashes(fragment);
    },

    add: function add(re, handler) {
        if (typeof re === "function") {
            handler = re;
            re = "";
        }
        this.routes.push({ re: re, handler: handler });

        return this;
    },

    check: function check(preRendered, f) {
        var fragment = f || this.getFragment();
        for (var i = 0; i < this.routes.length; i++) {
            var match = fragment.match(this.routes[i].re);
            if (match) {
                match.shift();
                match.unshift(preRendered);
                this.routes[i].handler.apply({}, match);
                return this;
            }
        }
        return this;
    },

    clearSlashes: function clearSlashes(path) {
        return path.toString().replace(/\/$/, "").replace(/^\//, "");
    },

    listen: function listen() {
        var self = this;
        var current = self.getFragment();

        window.addEventListener("popstate", function () {
            if (current !== self.getFragment()) {
                current = self.getFragment();
                self.check(false, current);
            }
        });

        return this;
    },

    navigate: function navigate(path) {
        path = path ? path : "";

        window.history.pushState(null, null, this.root + this.clearSlashes(path));

        this.check(false);

        return this;
    },

    update: function update(path) {
        path = path ? path : "";

        window.history.pushState(null, null, this.root + this.clearSlashes(path));

        return this;
    }
};

module.exports = Router;

},{}],"/Library/WebServer/Documents/tocktick/lib/routers/account.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Router = require("./router");

var RouterAccount = (function (Router) {
  function RouterAccount() {
    _classCallCheck(this, RouterAccount);

    if (Router != null) {
      Router.apply(this, arguments);
    }
  }

  _inherits(RouterAccount, Router);

  _prototypeProperties(RouterAccount, {
    getMatched: {
      value: function getMatched(route, routeParts, queryString) {

        switch (true) {
          case route === "":
            return true;
        }
      },
      writable: true,
      configurable: true
    }
  });

  return RouterAccount;
})(Router);

module.exports = RouterAccount;

},{"./router":"/Library/WebServer/Documents/tocktick/lib/routers/router.js"}],"/Library/WebServer/Documents/tocktick/lib/routers/front.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Router = require("./router");

var RouterFront = (function (Router) {
  function RouterFront() {
    _classCallCheck(this, RouterFront);

    if (Router != null) {
      Router.apply(this, arguments);
    }
  }

  _inherits(RouterFront, Router);

  _prototypeProperties(RouterFront, {
    getMatched: {
      value: function getMatched(route, routeParts, queryString) {

        switch (true) {
          case route === "":
            return true;
        }
      },
      writable: true,
      configurable: true
    }
  });

  return RouterFront;
})(Router);

module.exports = RouterFront;

},{"./router":"/Library/WebServer/Documents/tocktick/lib/routers/router.js"}],"/Library/WebServer/Documents/tocktick/lib/routers/router.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Router = (function () {
  function Router() {
    _classCallCheck(this, Router);
  }

  _prototypeProperties(Router, {
    match: {
      value: function match(route, query, onMatched, onUnmatched) {
        route = route || "";

        route = route.replace(/\/$/, "").trim();
        var routeParts = route.split("/");

        var matched = this.getMatched(route, routeParts, query);

        if (matched !== false) {
          if (onMatched) {
            onMatched(matched);
          }
        } else {
          if (onUnmatched) {
            onUnmatched(routeParts, query);
          }
        }
      },
      writable: true,
      configurable: true
    },
    getMatched: {
      value: function getMatched(route, routeParts, queryString) {
        var matched = false;

        //For tests
        if (route === "test") {
          matched = true;
        }

        return matched;
      },
      writable: true,
      configurable: true
    }
  });

  return Router;
})();

module.exports = Router;

},{}],"/Library/WebServer/Documents/tocktick/lib/routers/timers.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Router = require("./router");

var RouterTimers = (function (Router) {
  function RouterTimers() {
    _classCallCheck(this, RouterTimers);

    if (Router != null) {
      Router.apply(this, arguments);
    }
  }

  _inherits(RouterTimers, Router);

  _prototypeProperties(RouterTimers, {
    getMatched: {
      value: function getMatched(route, routeParts, queryString) {
        var matched = false;

        if (route === "") {

          matched = {
            name: "base"
          };
        } else {

          if (routeParts.length === 1) {

            matched = {
              name: "timer",
              id: routeParts[0]
            };
          } else if (routeParts.length === 2) {

            if (routeParts[0] === "edit") {

              matched = {
                name: "timer-edit",
                id: routeParts[1]
              };
            }
          }
        }

        return matched;
      },
      writable: true,
      configurable: true
    }
  });

  return RouterTimers;
})(Router);

module.exports = RouterTimers;

},{"./router":"/Library/WebServer/Documents/tocktick/lib/routers/router.js"}],"/Library/WebServer/Documents/tocktick/lib/views/account.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("./view");

var ViewAccount = (function (View) {
  function ViewAccount(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewAccount);

    _get(Object.getPrototypeOf(ViewAccount.prototype), "constructor", this).call(this, container, {
      all: {
        name: "account",
        template: templates.account,
        postRender: function (data) {
          _this.initJobAdd(data);
          _this.initTagAdd(data);
          _this.initJobDelete(data);
          _this.initTagDelete(data);
        } } }, callbacks);
  }

  _inherits(ViewAccount, View);

  _prototypeProperties(ViewAccount, null, {
    initJobAdd: {
      value: function initJobAdd(data) {
        var _this = this;

        console.log("initJobAdd");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("account__job-add")) {
            event.preventDefault();

            var form = event.target;

            var job = _this._callbacks.onJobAddSubmit({
              name: form.elements.name.value });

            form.dataset.apiAction += "/" + job.getID();

            _this.submitForm(form).then(function (jobData) {
              _this._callbacks.onJobAddResponse(jobData);
            });
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTagAdd: {
      value: function initTagAdd(data) {
        var _this = this;

        console.log("initTagAdd");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("account__tag-add")) {
            event.preventDefault();

            var form = event.target;

            var tag = _this._callbacks.onTagAddSubmit({
              name: form.elements.name.value });

            form.dataset.apiAction += "/" + tag.getID();

            _this.submitForm(form).then(function (tagData) {
              _this._callbacks.onTagAddResponse(tagData);
            });
          }
        });
      },
      writable: true,
      configurable: true
    },
    initJobDelete: {
      value: function initJobDelete(data) {
        var _this = this;

        console.log("initJobDelete");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("account__job-delete")) {
            event.preventDefault();

            var form = event.target;
            var jobID = form.dataset.jobId;

            if (data.grouped._jobs.all[jobID]) {
              var job = data.grouped._jobs.all[jobID];

              _this._callbacks.onJobDeleteSubmit(job);

              _this.submitForm(form).then(function (success) {
                _this._callbacks.onJobDeleteResponse(success);
              });
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTagDelete: {
      value: function initTagDelete(data) {
        var _this = this;

        console.log("initTagDelete");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("account__tag-delete")) {
            event.preventDefault();

            var form = event.target;
            var tagID = form.dataset.tagId;

            if (data.grouped._tags.all[tagID]) {
              var tag = data.grouped._tags.all[tagID];

              _this._callbacks.onTagDeleteSubmit(tag);

              _this.submitForm(form).then(function (success) {
                _this._callbacks.onTagDeleteResponse(success);
              });
            }
          }
        });
      },
      writable: true,
      configurable: true
    }
  });

  return ViewAccount;
})(View);

module.exports = ViewAccount;

},{"./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/app.js":[function(require,module,exports){
"use strict";

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("./view");

var ViewApp = (function (View) {
  function ViewApp(container, templates, callbacks) {
    _classCallCheck(this, ViewApp);

    _get(Object.getPrototypeOf(ViewApp.prototype), "constructor", this).call(this, container, {
      all: {
        name: "app",
        template: templates.app,
        postRender: function (data) {} } }, callbacks);
  }

  _inherits(ViewApp, View);

  return ViewApp;
})(View);

module.exports = ViewApp;

},{"./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/front.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("./view");

var ViewFront = (function (View) {
  function ViewFront(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewFront);

    _get(Object.getPrototypeOf(ViewFront.prototype), "constructor", this).call(this, container, {
      all: {
        name: "front",
        template: templates.front,
        postRender: function (data) {
          _this.enableJSVersion();
          _this.initStartTimer();
          _this.initTimerJobEdit();
          _this.initTimerTagsEdit(data);
        } } }, callbacks);
  }

  _inherits(ViewFront, View);

  _prototypeProperties(ViewFront, null, {
    initStartTimer: {
      value: function initStartTimer() {
        var _this = this;

        console.log("initStartTimer front");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("front-form-start")) {
            event.preventDefault();

            var form = event.target;
            var vars = _this.serializeForm(form.elements);

            var timer = _this._callbacks.onTimerStartSubmit({
              description: vars.description,
              jobID: vars.jobid }, vars["tags[]"]);

            form.elements.actiontime.value = timer.getStartTime();
            form.dataset.apiAction += "/" + timer.getID();

            _this.submitForm(form).then(function (timerData) {
              _this._callbacks.onTimerStartResponse(timerData);
            });
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerJobEdit: {
      value: function initTimerJobEdit() {
        var _this = this;

        console.log("initTimerJob front");

        this.registerContainerEventListener("click", function (event) {
          if (event.target.classList.contains("selectme")) {
            event.preventDefault();

            var button = event.target;

            if (_this._callbacks.onTimerJobClick) {
              _this._callbacks.onTimerJobClick(button.dataset.timerId, _this._container.querySelector(".front-timer-job"));
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerTagsEdit: {
      value: function initTimerTagsEdit(data) {
        var _this = this;

        console.log("initTimerTagsEdit front");

        this.registerContainerEventListener("click", function (event) {
          if (event.target.classList.contains("edittags")) {
            event.preventDefault();

            var timerID = event.target.dataset.timerId;
            if (_this._callbacks.onTimerTagsClick) {
              _this._callbacks.onTimerTagsClick(timerID, _this._container.querySelector(".front-timer-tags"));
            }
          }
        });
      },
      writable: true,
      configurable: true
    }
  });

  return ViewFront;
})(View);

module.exports = ViewFront;

},{"./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/nav.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("./view");

var urlparse = require("url").parse;

var ViewNav = (function (View) {
  function ViewNav(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewNav);

    _get(Object.getPrototypeOf(ViewNav.prototype), "constructor", this).call(this, container, {
      all: {
        name: "nav-outer",
        template: templates["nav-outer"],
        postRender: function (data) {
          _this.initTimerStart(data);
          _this.initLinks();
        } },
      nav: {
        name: "nav",
        template: templates.nav,
        postRender: function (data) {} },
      "nav-timer": {
        name: "nav-timer",
        template: templates["nav-timer"],
        postRender: function (data) {} } }, callbacks);
  }

  _inherits(ViewNav, View);

  _prototypeProperties(ViewNav, null, {
    initLinks: {
      value: function initLinks() {
        var _this = this;

        this.registerContainerEventListener("click", function (event) {
          if (typeof event.target.dataset.nav !== "undefined") {
            event.preventDefault();

            _this._callbacks.onLinkClicked(urlparse(event.target.href).pathname);
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerStart: {
      value: function initTimerStart(data) {
        var _this = this;

        console.log("initTimerStart");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("nav-form-start")) {
            event.preventDefault();

            var form = event.target;

            var timer = _this._callbacks.onTimerStartSubmit({
              jobID: form.elements.jobid.value,
              description: form.elements.description.value });

            form.elements.actiontime.value = timer.getStartTime();
            form.elements.jobid.value = timer.getJobID();
            form.dataset.apiAction += "/" + timer.getID();

            _this.submitForm(form).then(function (timerData) {
              _this._callbacks.onTimerStartResponse(timerData);
            });
          }
        });
      },
      writable: true,
      configurable: true
    }
  });

  return ViewNav;
})(View);

module.exports = ViewNav;

//this.initLinks();

//this.initTimerStart(data);

},{"./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js","url":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/url/url.js"}],"/Library/WebServer/Documents/tocktick/lib/views/overlay-view.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var View = require("./view");

var OverlayView = (function (View) {
  function OverlayView() {
    _classCallCheck(this, OverlayView);

    if (View != null) {
      View.apply(this, arguments);
    }
  }

  _inherits(OverlayView, View);

  _prototypeProperties(OverlayView, null, {
    render: {
      value: function render(data, preRendered) {
        var _this = this;

        _get(Object.getPrototypeOf(OverlayView.prototype), "render", this).call(this, data, preRendered);

        this._overlay = this._container.querySelector(".overlay");

        this._overlay.addEventListener("click", function (event) {
          if (event.target.classList.contains("overlay__close") || event.target.parentNode.classList.contains("overlay__close")) {
            _this.close();
          }
        });

        this.open();
      },
      writable: true,
      configurable: true
    },
    open: {
      value: function open() {
        this._overlay.classList.add("overlay--show");
      },
      writable: true,
      configurable: true
    },
    close: {
      value: function close() {
        this._overlay.classList.remove("overlay--show");
      },
      writable: true,
      configurable: true
    }
  });

  return OverlayView;
})(View);

module.exports = OverlayView;

},{"./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/timer-job.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var OverlayView = require("./overlay-view");

var ViewTimerJob = (function (OverlayView) {
  function ViewTimerJob(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewTimerJob);

    _get(Object.getPrototypeOf(ViewTimerJob.prototype), "constructor", this).call(this, container, {
      all: {
        name: "timer-job",
        template: templates["timer-job"],
        postRender: function (data) {
          _this.initJobSelect();
        } } }, callbacks);
  }

  _inherits(ViewTimerJob, OverlayView);

  _prototypeProperties(ViewTimerJob, null, {
    initJobSelect: {
      value: function initJobSelect() {
        var _this = this;

        var items = this._container.querySelectorAll(".selectmebox__inner__option");

        for (var i = 0; i < items.length; i++) {
          (function (i) {
            items[i].addEventListener("click", function () {
              if (_this._callbacks.onJobSelected) {
                _this._callbacks.onJobSelected(items[i].dataset.value);
              }
              _this.close();
            });
          })(i);
        }
      },
      writable: true,
      configurable: true
    }
  });

  return ViewTimerJob;
})(OverlayView);

module.exports = ViewTimerJob;

},{"./overlay-view":"/Library/WebServer/Documents/tocktick/lib/views/overlay-view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/timer-tags.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var OverlayView = require("./overlay-view");

var ViewTimerTags = (function (OverlayView) {
  function ViewTimerTags(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewTimerTags);

    _get(Object.getPrototypeOf(ViewTimerTags.prototype), "constructor", this).call(this, container, {
      all: {
        name: "timer-tags",
        template: templates["timer-tags"],
        postRender: function (data) {
          _this.initTagSelect();
          _this.initDone();
        } } }, callbacks);
  }

  _inherits(ViewTimerTags, OverlayView);

  _prototypeProperties(ViewTimerTags, null, {
    initTagSelect: {
      value: function initTagSelect() {
        var tags = this._container.querySelectorAll(".timer-tags__tag");

        for (var i = 0; i < tags.length; i++) {
          (function (i) {
            tags[i].addEventListener("click", function () {
              tags[i].classList.toggle("timer-tags__tag--selected");
            });
          })(i);
        }
      },
      writable: true,
      configurable: true
    },
    initDone: {
      value: function initDone() {
        var _this = this;

        var done = this._container.querySelector(".timer-tags-done");

        done.addEventListener("click", function () {
          var tags = _this._container.querySelectorAll(".timer-tags__tag--selected");
          var tagIDs = [];
          for (var i = 0; i < tags.length; i++) {
            tagIDs.push(tags[i].dataset.value);
          }

          _this._callbacks.onDone(tagIDs);

          _this.close();
        });
      },
      writable: true,
      configurable: true
    }
  });

  return ViewTimerTags;
})(OverlayView);

module.exports = ViewTimerTags;

},{"./overlay-view":"/Library/WebServer/Documents/tocktick/lib/views/overlay-view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/timers.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Handlebars = require("../../node_modules/handlebars/dist/handlebars.runtime");

var View = require("./view");

var ViewTimers = (function (View) {
  function ViewTimers(container, templates, callbacks) {
    var _this = this;

    _classCallCheck(this, ViewTimers);

    _get(Object.getPrototypeOf(ViewTimers.prototype), "constructor", this).call(this, container, {
      all: {
        name: "timers",
        template: templates.timers,
        postRender: function (data) {
          _this.enableJSVersion();
          _this.initTimerDurationUpdate(data);
          _this.initTimerStop(data);
          _this.initTimerUpdate(data);
          _this.initTimerEdit(data);
          _this.initTimerDelete(data);
          _this.initTimerJobEdit();
          _this.initTimerTagsEdit(data);
          _this.initLoadMore();
        } } }, callbacks);

    this._timerDurationUpdateData = [];
  }

  _inherits(ViewTimers, View);

  _prototypeProperties(ViewTimers, null, {
    renderTimerItemEdit: {
      value: function renderTimerItemEdit(timer, data) {
        this.renderElement("timer-list-item__edit--" + timer.getID(), "timer-item-edit", timer, data);
      },
      writable: true,
      configurable: true
    },
    updateTimerDurationUpdateData: {
      value: function updateTimerDurationUpdateData(data) {
        this._timerDurationUpdateData = [];

        var timers = data.grouped.getCurrentTimers();

        if (timers.length) {
          for (var i = 0; i < timers.length; i++) {
            this._timerDurationUpdateData.push({
              timer: timers[i],
              $el: this._container.querySelector(".timer-list-item--" + timers[i].getID() + " .timer-list-item__timings__duration span"),
              lastDuration: 0
            });
          }
        }
      },
      writable: true,
      configurable: true
    },
    initTimerDurationUpdate: {
      value: function initTimerDurationUpdate(data) {
        this.updateTimerDurationUpdateData(data);
        this.updateTimerDurations(this._timerDurationUpdateData);
      },
      writable: true,
      configurable: true
    },
    updateTimerDurations: {
      value: function updateTimerDurations() {
        for (var i = 0; i < this._timerDurationUpdateData.length; i++) {
          var timerData = this._timerDurationUpdateData[i];

          if (timerData.$el) {
            var duration = timerData.timer.getDuration();
            if (timerData.timer.isRunning() && duration - timerData.lastDuration > 1000) {
              timerData.$el.textContent = timerData.timer.getFormattedDuration(true);
              timerData.lastDuration = duration;
            }
          }
        }

        window.requestAnimationFrame(this.updateTimerDurations.bind(this));
      },
      writable: true,
      configurable: true
    },
    initTimerStop: {
      value: function initTimerStop(data) {
        var _this = this;

        console.log("initTimerStop");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("timer-list-item__actions__stop")) {
            event.preventDefault();

            var form = event.target;
            var timerID = form.dataset.timerId;

            if (data.grouped._timers.all[timerID]) {
              var timer = data.grouped._timers.all[timerID];

              _this._callbacks.onTimerStopSubmit(timer);

              form.elements.actiontime.value = timer.getStopTime();

              _this.submitForm(form).then(function (timerData) {
                _this._callbacks.onTimerStopResponse(timerData);
              });
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerEdit: {
      value: function initTimerEdit(data) {
        var _this = this;

        console.log("initTimerEdit");

        this.registerContainerEventListener("click", function (event) {
          var edit = event.target.parentNode.parentNode;
          if (edit.classList.contains("timer-list-item__actions__edit")) {
            event.preventDefault();

            var timerID = edit.dataset.timerId;

            var allEdits = _this._container.querySelectorAll(".timer-list-item__subactions");
            var forms = _this._container.querySelectorAll(".timer-list-item__actions__edit");

            var subform = _this._container.querySelector(".timer-list-item--" + timerID + " .timer-list-item__subactions");
            if (subform.classList.contains("timer-list-item__subactions--show")) {
              subform.classList.remove("timer-list-item__subactions--show");
              edit.classList.remove("timer-list-item__actions__edit--active");
              _this._callbacks.onTimerEditClose(timerID);
            } else {
              for (var i = 0; i < allEdits.length; i++) {
                allEdits[i].classList.remove("timer-list-item__subactions--show");
                forms[i].classList.remove("timer-list-item__actions__edit--active");
              }
              subform.classList.add("timer-list-item__subactions--show");
              edit.classList.add("timer-list-item__actions__edit--active");
              _this._callbacks.onTimerEditOpen(timerID);
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerUpdate: {
      value: function initTimerUpdate(data) {
        var _this = this;

        console.log("initTimerUpdate");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("timer-list-item__edit")) {
            event.preventDefault();

            var form = event.target;
            var timerID = form.dataset.timerId;

            if (data.grouped._timers.all[timerID]) {
              var timer = data.grouped._timers.all[timerID];

              var vars = _this.serializeForm(form.elements);

              _this._callbacks.onTimerUpdateSubmit(timer, {
                description: vars.description,
                jobID: vars.jobid }, vars["tags[]"]);

              _this.updateTimerDurationUpdateData(data);

              _this.submitForm(form).then(function (timerData) {
                _this._callbacks.onTimerUpdateResponse(timerData);
              });
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerDelete: {
      value: function initTimerDelete(data) {
        var _this = this;

        console.log("initTimerDelete");

        this.registerContainerEventListener("submit", function (event) {
          if (event.target.classList.contains("timer-list-item__delete")) {
            event.preventDefault();

            var form = event.target;
            var timerID = form.dataset.timerId;

            if (data.grouped._timers.all[timerID]) {
              var timer = data.grouped._timers.all[timerID];

              _this._callbacks.onTimerDeleteSubmit(timer);

              _this.submitForm(form).then(function (success) {
                _this._callbacks.onTimerDeleteResponse(success);
              });
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerJobEdit: {
      value: function initTimerJobEdit(data) {
        var _this = this;

        console.log("initTimerJobEdit timers");

        this.registerContainerEventListener("click", function (event) {
          if (event.target.classList.contains("selectme")) {
            event.preventDefault();

            var timerID = event.target.dataset.timerId;
            if (_this._callbacks.onTimerJobClick) {
              _this._callbacks.onTimerJobClick(timerID, _this._container.querySelector(".timers-timer-job"));
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initTimerTagsEdit: {
      value: function initTimerTagsEdit(data) {
        var _this = this;

        console.log("initTimerTagsEdit timers");

        this.registerContainerEventListener("click", function (event) {
          if (event.target.classList.contains("edittags")) {
            event.preventDefault();

            var timerID = event.target.dataset.timerId;
            if (_this._callbacks.onTimerTagsClick) {
              _this._callbacks.onTimerTagsClick(timerID, _this._container.querySelector(".timers-timer-tags"));
            }
          }
        });
      },
      writable: true,
      configurable: true
    },
    initLoadMore: {
      value: function initLoadMore() {
        var _this = this;

        this.registerContainerEventListener("click", function (event) {
          if (event.target.classList.contains("timers-loadmore")) {
            event.preventDefault();
            _this._callbacks.onLoadMore();

            console.log("load more");
          }
        });
      },
      writable: true,
      configurable: true
    },
    loadMore: {
      value: function loadMore(data) {
        var template = Handlebars.template(App.templates["timer-group"]);
        var t = template(data);

        this._container.querySelector(".timers-history").insertAdjacentHTML("beforeend", t);
        this.updateTimerDurationUpdateData(data);
      },
      writable: true,
      configurable: true
    }
  });

  return ViewTimers;
})(View);

module.exports = ViewTimers;

},{"../../node_modules/handlebars/dist/handlebars.runtime":"/Library/WebServer/Documents/tocktick/node_modules/handlebars/dist/handlebars.runtime.js","./view":"/Library/WebServer/Documents/tocktick/lib/views/view.js"}],"/Library/WebServer/Documents/tocktick/lib/views/view.js":[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Handlebars = require("../../node_modules/handlebars/dist/handlebars.runtime");
var request = require("then-request");
var localStorage = localStorage; //needed so we can rewire localStorage in tests

var View = (function () {
  function View(container, parts, callbacks) {
    _classCallCheck(this, View);

    this.setContainer(container);
    this.initParts(parts);
    this.setCallbacks(callbacks);
  }

  _prototypeProperties(View, null, {
    setContainer: {
      value: function setContainer(container) {
        this._container = container;
        return this;
      },
      writable: true,
      configurable: true
    },
    getContainer: {
      value: function getContainer() {
        return this._container;
      },
      writable: true,
      configurable: true
    },
    setParts: {
      value: function setParts(parts) {
        this._parts = parts;
        return this;
      },
      writable: true,
      configurable: true
    },
    getParts: {
      value: function getParts() {
        return this._parts;
      },
      writable: true,
      configurable: true
    },
    initParts: {
      value: function initParts(parts) {
        this.setParts(parts);

        this._isDirty = {};

        this.setDirty("all");

        for (var key in this._parts) {
          this.setDirty(this._parts[key].name);
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    setDirty: {
      value: function setDirty(name) {
        this._isDirty[name] = true;
        return this;
      },
      writable: true,
      configurable: true
    },
    getDirty: {
      value: function getDirty() {
        return this._isDirty;
      },
      writable: true,
      configurable: true
    },
    setCallbacks: {
      value: function setCallbacks(callbacks) {
        this._callbacks = callbacks || {};
        return this;
      },
      writable: true,
      configurable: true
    },
    getCallbacks: {
      value: function getCallbacks() {
        return this._callbacks;
      },
      writable: true,
      configurable: true
    },
    enableJSVersion: {
      value: function enableJSVersion() {
        var hides = this._container.querySelectorAll(".hide-for-js-version");
        for (var i = 0; i < hides.length; i++) {}
      },
      writable: true,
      configurable: true
    },
    render: {
      value: function render(data, preRendered) {

        if (this._isDirty.all) {
          if (!preRendered) {
            var template = Handlebars.template(this._parts.all.template);
            this.removeContainerEventListeners();
            var t = template(data, { data: false });
            this._container.innerHTML = t;
          }

          if (this._parts.all.postRender) {
            this._parts.all.postRender(data);
          }

          for (var part in this._isDirty) {
            this._isDirty[part] = false;
          }
        } else {
          for (var part in this._isDirty) {
            if (part !== "all" && this._isDirty[part]) {
              this.renderPart(part, data, this._parts[part].postRender);
            }
          }
        }
      },
      writable: true,
      configurable: true
    },
    renderPart: {
      value: function renderPart(name, data, postRender) {
        var template = Handlebars.template(this._parts[name].template);
        var el = this._container.querySelector("." + name);
        el.outerHTML = template(data);

        if (postRender) {
          postRender(data);
        }

        this._isDirty[name] = false;
      },
      writable: true,
      configurable: true
    },
    renderElement: {
      value: function renderElement(name, templateName, data, rootData, postRender) {
        var template = Handlebars.template(App.templates[templateName]);
        var el = this._container.querySelector("." + name);
        el.outerHTML = template(data, { data: { root: rootData } });

        if (postRender) {
          postRender(data);
        }
      },
      writable: true,
      configurable: true
    },
    removeElement: {
      value: function removeElement(name) {
        var el = this._container.querySelector("." + name);
        el.outerHTML = "";
      },
      writable: true,
      configurable: true
    },
    serializeForm: {
      value: function serializeForm(elements) {
        var vars = {};

        for (var i = 0; i < elements.length; i++) {
          var el = elements[i];
          switch (el.type) {
            case "checkbox":
              if (!vars[el.name]) {
                vars[el.name] = [];
              }
              if (el.checked) {
                vars[el.name].push(el.value);
              }
              break;
            default:
              vars[el.name] = el.value;
              break;
          }
        }

        return vars;
      },
      writable: true,
      configurable: true
    },
    submitForm: {
      value: function submitForm(form, method, action) {
        method = method || form.dataset.apiMethod || form.method;
        action = action || form.dataset.apiAction || form.action;

        var data = {};
        var qs = {};

        var vars = this.serializeForm(form.elements);

        if (method.toLowerCase() === "get") {
          qs = vars;
        } else {
          data = vars;
        }

        return request(method, action, {
          json: data,
          qs: qs
        }).then(function (res) {
          if (res.statusCode === 0) {
            var queue = localStorage.getItem("api-queue");
            if (!queue) {
              queue = [];
            } else {
              queue = JSON.parse(queue);
            }
            queue.push({
              method: method,
              action: action,
              data: data,
              qs: qs });
            localStorage.setItem("api-queue", JSON.stringify(queue));
          }
          return JSON.parse(res.getBody());
        }, function (err) {
          Error(err);
          console.log("form error: ", err);
        });
      },
      writable: true,
      configurable: true
    },
    registerContainerEventListener: {
      value: function registerContainerEventListener(type, listener) {
        this._container.children[0].addEventListener(type, listener);

        if (!this._parts.all.eventListeners) {
          this._parts.all.eventListeners = [];
        }

        this._parts.all.eventListeners.push({
          type: type,
          listener: listener
        });
      },
      writable: true,
      configurable: true
    },
    removeContainerEventListeners: {
      value: function removeContainerEventListeners() {
        // need to remove these on each _container render otherwise they will be bound twice
        var eventListeners = this._parts.all.eventListeners;
        if (eventListeners) {
          for (var i = 0; i < eventListeners.length; i++) {
            this._container.children[0].removeEventListener(eventListeners[i].type, eventListeners[i].listener);
          }
        }
      },
      writable: true,
      configurable: true
    }
  });

  return View;
})();

module.exports = View;

//hides[i].classList.add('hide');

},{"../../node_modules/handlebars/dist/handlebars.runtime":"/Library/WebServer/Documents/tocktick/node_modules/handlebars/dist/handlebars.runtime.js","then-request":"/Library/WebServer/Documents/tocktick/node_modules/then-request/browser.js"}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js":[function(require,module,exports){

},{}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/punycode/punycode.js":[function(require,module,exports){
(function (global){
/*! http://mths.be/punycode v1.2.4 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.4',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/decode.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/encode.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/index.js":[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/decode.js","./encode":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/encode.js"}],"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/url/url.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/punycode/punycode.js","querystring":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/querystring-es3/index.js"}],"/Library/WebServer/Documents/tocktick/node_modules/handlebars/dist/handlebars.runtime.js":[function(require,module,exports){
(function (global){
/*!

 handlebars v3.0.0

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
/* exported Handlebars */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Handlebars = factory();
  }
}(this, function () {
// handlebars/utils.js
var __module2__ = (function() {
  "use strict";
  var __exports__ = {};
  /*jshint -W004 */
  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  __exports__.extend = extend;var toString = Object.prototype.toString;
  __exports__.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  var isFunction = function(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  __exports__.isFunction = isFunction;
  /* istanbul ignore next */
  var isArray = Array.isArray || function(value) {
    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
  };
  __exports__.isArray = isArray;
  // Older IE versions do not directly support indexOf so we must implement our own, sadly.
  function indexOf(array, value) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  }

  __exports__.indexOf = indexOf;
  function escapeExpression(string) {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return "";
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = "" + string;

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  }

  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  __exports__.isEmpty = isEmpty;function blockParams(params, ids) {
    params.path = ids;
    return params;
  }

  __exports__.blockParams = blockParams;function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }

  __exports__.appendContextPath = appendContextPath;
  return __exports__;
})();

// handlebars/exception.js
var __module3__ = (function() {
  "use strict";
  var __exports__;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var loc = node && node.loc,
        line,
        column;
    if (loc) {
      line = loc.start.line;
      column = loc.start.column;

      message += ' - ' + line + ':' + column;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    if (loc) {
      this.lineNumber = line;
      this.column = column;
    }
  }

  Exception.prototype = new Error();

  __exports__ = Exception;
  return __exports__;
})();

// handlebars/base.js
var __module1__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;

  var VERSION = "3.0.0";
  __exports__.VERSION = VERSION;var COMPILER_REVISION = 6;
  __exports__.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1'
  };
  __exports__.REVISION_CHANGES = REVISION_CHANGES;
  var isArray = Utils.isArray,
      isFunction = Utils.isFunction,
      toString = Utils.toString,
      objectType = '[object Object]';

  function HandlebarsEnvironment(helpers, partials) {
    this.helpers = helpers || {};
    this.partials = partials || {};

    registerDefaultHelpers(this);
  }

  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: logger,
    log: log,

    registerHelper: function(name, fn) {
      if (toString.call(name) === objectType) {
        if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
        Utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function(name) {
      delete this.helpers[name];
    },

    registerPartial: function(name, partial) {
      if (toString.call(name) === objectType) {
        Utils.extend(this.partials,  name);
      } else {
        if (typeof partial === 'undefined') {
          throw new Exception('Attempting to register a partial as undefined');
        }
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function(name) {
      delete this.partials[name];
    }
  };

  function registerDefaultHelpers(instance) {
    instance.registerHelper('helperMissing', function(/* [args, ]options */) {
      if(arguments.length === 1) {
        // A missing field in a {{foo}} constuct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
      }
    });

    instance.registerHelper('blockHelperMissing', function(context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if(context === true) {
        return fn(this);
      } else if(context === false || context == null) {
        return inverse(this);
      } else if (isArray(context)) {
        if(context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
          options = {data: data};
        }

        return fn(context, options);
      }
    });

    instance.registerHelper('each', function(context, options) {
      if (!options) {
        throw new Exception('Must pass iterator to #each');
      }

      var fn = options.fn, inverse = options.inverse;
      var i = 0, ret = "", data;

      var contextPath;
      if (options.data && options.ids) {
        contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (isFunction(context)) { context = context.call(this); }

      if (options.data) {
        data = createFrame(options.data);
      }

      function execIteration(key, i, last) {
        if (data) {
          data.key = key;
          data.index = i;
          data.first = i === 0;
          data.last  = !!last;

          if (contextPath) {
            data.contextPath = contextPath + key;
          }
        }

        ret = ret + fn(context[key], {
          data: data,
          blockParams: Utils.blockParams([context[key], key], [contextPath + key, null])
        });
      }

      if(context && typeof context === 'object') {
        if (isArray(context)) {
          for(var j = context.length; i<j; i++) {
            execIteration(i, i, i === context.length-1);
          }
        } else {
          var priorKey;

          for(var key in context) {
            if(context.hasOwnProperty(key)) {
              // We're running the iterations one step out of sync so we can detect
              // the last iteration without have to scan the object twice and create
              // an itermediate keys array. 
              if (priorKey) {
                execIteration(priorKey, i-1);
              }
              priorKey = key;
              i++;
            }
          }
          if (priorKey) {
            execIteration(priorKey, i-1, true);
          }
        }
      }

      if(i === 0){
        ret = inverse(this);
      }

      return ret;
    });

    instance.registerHelper('if', function(conditional, options) {
      if (isFunction(conditional)) { conditional = conditional.call(this); }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function(conditional, options) {
      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
    });

    instance.registerHelper('with', function(context, options) {
      if (isFunction(context)) { context = context.call(this); }

      var fn = options.fn;

      if (!Utils.isEmpty(context)) {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
          options = {data:data};
        }

        return fn(context, options);
      } else {
        return options.inverse(this);
      }
    });

    instance.registerHelper('log', function(message, options) {
      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
      instance.log(level, message);
    });

    instance.registerHelper('lookup', function(obj, field) {
      return obj && obj[field];
    });
  }

  var logger = {
    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

    // State enum
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 1,

    // Can be overridden in the host environment
    log: function(level, message) {
      if (typeof console !== 'undefined' && logger.level <= level) {
        var method = logger.methodMap[level];
        (console[method] || console.log).call(console, message);
      }
    }
  };
  __exports__.logger = logger;
  var log = logger.log;
  __exports__.log = log;
  var createFrame = function(object) {
    var frame = Utils.extend({}, object);
    frame._parent = object;
    return frame;
  };
  __exports__.createFrame = createFrame;
  return __exports__;
})(__module2__, __module3__);

// handlebars/safe-string.js
var __module4__ = (function() {
  "use strict";
  var __exports__;
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
    return "" + this.string;
  };

  __exports__ = SafeString;
  return __exports__;
})();

// handlebars/runtime.js
var __module5__ = (function(__dependency1__, __dependency2__, __dependency3__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;
  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
  var createFrame = __dependency3__.createFrame;

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = REVISION_CHANGES[currentRevision],
            compilerVersions = REVISION_CHANGES[compilerRevision];
        throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
              "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
              "Please update your runtime to a newer version ("+compilerInfo[1]+").");
      }
    }
  }

  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new Exception("No environment passed to template");
    }
    if (!templateSpec || !templateSpec.main) {
      throw new Exception('Unknown template object: ' + typeof templateSpec);
    }

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    var invokePartialWrapper = function(partial, context, options) {
      if (options.hash) {
        context = Utils.extend({}, context, options.hash);
      }

      partial = env.VM.resolvePartial.call(this, partial, context, options);
      var result = env.VM.invokePartial.call(this, partial, context, options);

      if (result == null && env.compile) {
        options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
        result = options.partials[options.name](context, options);
      }
      if (result != null) {
        if (options.indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = options.indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new Exception("The partial " + options.name + " could not be compiled when running in runtime-only mode");
      }
    };

    // Just add water
    var container = {
      strict: function(obj, name) {
        if (!(name in obj)) {
          throw new Exception('"' + name + '" not defined in ' + obj);
        }
        return obj[name];
      },
      lookup: function(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function(i) {
        return templateSpec[i];
      },

      programs: [],
      program: function(i, data, declaredBlockParams, blockParams, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths || blockParams || declaredBlockParams) {
          programWrapper = program(this, i, fn, data, declaredBlockParams, blockParams, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = program(this, i, fn);
        }
        return programWrapper;
      },

      data: function(data, depth) {
        while (data && depth--) {
          data = data._parent;
        }
        return data;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common && (param !== common)) {
          ret = Utils.extend({}, common, param);
        }

        return ret;
      },

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    var ret = function(context, options) {
      options = options || {};
      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths,
          blockParams = templateSpec.useBlockParams ? [] : undefined;
      if (templateSpec.useDepths) {
        depths = options.depths ? [context].concat(options.depths) : [context];
      }

      return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
    };
    ret.isTop = true;

    ret._setup = function(options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
      }
    };

    ret._child = function(i, data, blockParams, depths) {
      if (templateSpec.useBlockParams && !blockParams) {
        throw new Exception('must pass block params');
      }
      if (templateSpec.useDepths && !depths) {
        throw new Exception('must pass parent depths');
      }

      return program(container, i, templateSpec[i], data, 0, blockParams, depths);
    };
    return ret;
  }

  __exports__.template = template;function program(container, i, fn, data, declaredBlockParams, blockParams, depths) {
    var prog = function(context, options) {
      options = options || {};

      return fn.call(container,
          context,
          container.helpers, container.partials,
          options.data || data,
          blockParams && [options.blockParams].concat(blockParams),
          depths && [context].concat(depths));
    };
    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    prog.blockParams = declaredBlockParams || 0;
    return prog;
  }

  __exports__.program = program;function resolvePartial(partial, context, options) {
    if (!partial) {
      partial = options.partials[options.name];
    } else if (!partial.call && !options.name) {
      // This is a dynamic partial that returned a string
      options.name = partial;
      partial = options.partials[partial];
    }
    return partial;
  }

  __exports__.resolvePartial = resolvePartial;function invokePartial(partial, context, options) {
    options.partial = true;

    if(partial === undefined) {
      throw new Exception("The partial " + options.name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    }
  }

  __exports__.invokePartial = invokePartial;function noop() { return ""; }

  __exports__.noop = noop;function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? createFrame(data) : {};
      data.root = context;
    }
    return data;
  }
  return __exports__;
})(__module2__, __module3__, __module1__);

// handlebars.runtime.js
var __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var base = __dependency1__;

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)
  var SafeString = __dependency2__;
  var Exception = __dependency3__;
  var Utils = __dependency4__;
  var runtime = __dependency5__;

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  var create = function() {
    var hb = new base.HandlebarsEnvironment();

    Utils.extend(hb, base);
    hb.SafeString = SafeString;
    hb.Exception = Exception;
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function(spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  };

  var Handlebars = create();
  Handlebars.create = create;

  /*jshint -W040 */
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function() {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
  };

  Handlebars['default'] = Handlebars;

  __exports__ = Handlebars;
  return __exports__;
})(__module1__, __module4__, __module3__, __module2__, __module5__);

  return __module0__;
}));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Library/WebServer/Documents/tocktick/node_modules/moment/moment.js":[function(require,module,exports){
(function (global){
//! moment.js
//! version : 2.9.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.9.0',
        // the global-scope this is NOT the global object in Node.js
        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,
        oldGlobalMoment,
        round = Math.round,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenOffsetMs = /[\+\-]?\d+/, // 1234567890123
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            x    : function () {
                return this.valueOf();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],

        updateInProgress = false;

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // thie is not supposed to happen
            return hour;
        }
    }

    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            moment.updateOffset(this);
            updateInProgress = false;
        }
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||
                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||
                                           m._a[SECOND] !== 0 ||
                                           m._a[MILLISECOND] !== 0)) ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0 &&
                    m._pf.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/utcOffset equivalent to
    // model.
    function makeAs(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (moment.isMoment(input) || isDate(input) ?
                    +input : +moment(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            moment.updateOffset(res, false);
            return res;
        } else {
            return moment(input).local();
        }
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _ordinalParseLenient.
            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName, format, strict) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = moment.utc([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LTS : 'h:mm:ss A',
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },


        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom, now) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom, [now]) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',
        _ordinalParse : /\d{1,2}/,

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        firstDayOfWeek : function () {
            return this._week.dow;
        },

        firstDayOfYear : function () {
            return this._week.doy;
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'x':
            return parseTokenOffsetMs;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function utcOffsetFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(
                            input.match(/\d{1,2}/)[0], 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._meridiem = input;
            // config._isPm = config._locale.isPM(input);
            break;
        // HOUR
        case 'h' : // fall through to hh
        case 'hh' :
            config._pf.bigHour = true;
            /* falls through */
        case 'H' : // fall through to HH
        case 'HH' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX OFFSET (MILLISECONDS)
        case 'x':
            config._d = new Date(toInt(input));
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = utcOffsetFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day || normalizedInput.date,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
            config._pf.bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],
                config._meridiem);
        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f,
            res;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        res = new Moment(config);
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== 'undefined') {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    moment.isDate = isDate;

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d - ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                if ('function' === typeof Date.prototype.toISOString) {
                    // native implementation is ~50x faster, use it when we can
                    return this.toDate().toISOString();
                } else {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(this._dateUtcOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,
                anchor, diff, output, daysAdjust;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month' || units === 'quarter') {
                output = monthDiff(this, that);
                if (units === 'quarter') {
                    output = output / 3;
                } else if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = this - that;
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're locat/utc/offset
            // or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this, moment(now)));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond') {
                return this;
            }
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this > +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return inputMs < +this.clone().startOf(units);
            }
        },

        isBefore: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this < +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return +this.clone().endOf(units) < inputMs;
            }
        },

        isBetween: function (from, to, units) {
            return this.isAfter(from, units) && this.isBefore(to, units);
        },

        isSame: function (input, units) {
            var inputMs;
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this === +input;
            } else {
                inputMs = +moment(input);
                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
            }
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        zone : deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. ' +
                'https://github.com/moment/moment/issues/1779',
                function (input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        utcOffset : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = utcOffsetFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._dateUtcOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : this._dateUtcOffset();
            }
        },

        isLocal : function () {
            return !this._isUTC;
        },

        isUtcOffset : function () {
            return this._isUTC;
        },

        isUtc : function () {
            return this._isUTC && this._offset === 0;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.utcOffset(this._tzm);
            } else if (typeof this._i === 'string') {
                this.utcOffset(utcOffsetFromString(this._i));
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).utcOffset();
            }

            return (this.utcOffset() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            var unit;
            if (typeof units === 'object') {
                for (unit in units) {
                    this.set(unit, units[unit]);
                }
            }
            else {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = moment.localeData(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        },

        lang : deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        ),

        localeData : function () {
            return this._locale;
        },

        _dateUtcOffset : function () {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }

    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    // alias isUtc for dev-friendliness
    moment.fn.isUTC = moment.fn.isUtc;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + this._milliseconds / 864e5;
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(yearsToDays(this._months / 12));
                switch (units) {
                    case 'week': return days / 7 + this._milliseconds / 6048e5;
                    case 'day': return days + this._milliseconds / 864e5;
                    case 'hour': return days * 24 + this._milliseconds / 36e5;
                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;
                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead ' +
            '(notice the capitals)',
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        },

        toJSON : function () {
            return this.toISOString();
        }
    });

    moment.duration.fn.toString = moment.duration.fn.toISOString;

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define(function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Library/WebServer/Documents/tocktick/node_modules/qs/index.js":[function(require,module,exports){
module.exports = require('./lib/');

},{"./lib/":"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/index.js"}],"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/index.js":[function(require,module,exports){
// Load modules

var Stringify = require('./stringify');
var Parse = require('./parse');


// Declare internals

var internals = {};


module.exports = {
    stringify: Stringify,
    parse: Parse
};

},{"./parse":"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/parse.js","./stringify":"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/stringify.js"}],"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/parse.js":[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000
};


internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        if (pos === -1) {
            obj[Utils.decode(part)] = '';
        }
        else {
            var key = Utils.decode(part.slice(0, pos));
            var val = Utils.decode(part.slice(pos + 1));

            if (!obj.hasOwnProperty(key)) {
                obj[key] = val;
            }
            else {
                obj[key] = [].concat(obj[key]).concat(val);
            }
        }
    }

    return obj;
};


internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj = {};
    if (root === '[]') {
        obj = [];
        obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        var indexString = '' + index;
        if (!isNaN(index) &&
            root !== cleanRoot &&
            indexString === cleanRoot &&
            index >= 0 &&
            index <= options.arrayLimit) {

            obj = [];
            obj[index] = internals.parseObject(chain, val, options);
        }
        else {
            obj[cleanRoot] = internals.parseObject(chain, val, options);
        }
    }

    return obj;
};


internals.parseKeys = function (key, val, options) {

    if (!key) {
        return;
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Don't allow them to overwrite object prototype properties

    if (Object.prototype.hasOwnProperty(segment[1])) {
        return;
    }

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

        ++i;
        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
            keys.push(segment[1]);
        }
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
};


module.exports = function (str, options) {

    if (str === '' ||
        str === null ||
        typeof str === 'undefined') {

        return {};
    }

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var newObj = internals.parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj);
    }

    return Utils.compact(obj);
};

},{"./utils":"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/utils.js"}],"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/stringify.js":[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    indices: true
};


internals.stringify = function (obj, prefix, options) {

    if (Utils.isBuffer(obj)) {
        obj = obj.toString();
    }
    else if (obj instanceof Date) {
        obj = obj.toISOString();
    }
    else if (obj === null) {
        obj = '';
    }

    if (typeof obj === 'string' ||
        typeof obj === 'number' ||
        typeof obj === 'boolean') {

        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        if (!options.indices &&
            Array.isArray(obj)) {

            values = values.concat(internals.stringify(obj[key], prefix, options));
        }
        else {
            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', options));
        }
    }

    return values;
};


module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
    options.indices = typeof options.indices === 'boolean' ? options.indices : internals.indices;

    var keys = [];

    if (typeof obj !== 'object' ||
        obj === null) {

        return '';
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        keys = keys.concat(internals.stringify(obj[key], key, options));
    }

    return keys.join(delimiter);
};

},{"./utils":"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/utils.js"}],"/Library/WebServer/Documents/tocktick/node_modules/qs/lib/utils.js":[function(require,module,exports){
// Load modules


// Declare internals

var internals = {};


exports.arrayToObject = function (source) {

    var obj = {};
    for (var i = 0, il = source.length; i < il; ++i) {
        if (typeof source[i] !== 'undefined') {

            obj[i] = source[i];
        }
    }

    return obj;
};


exports.merge = function (target, source) {

    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        }
        else {
            target[source] = true;
        }

        return target;
    }

    if (typeof target !== 'object') {
        target = [target].concat(source);
        return target;
    }

    if (Array.isArray(target) &&
        !Array.isArray(source)) {

        target = exports.arrayToObject(target);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];

        if (!target[key]) {
            target[key] = value;
        }
        else {
            target[key] = exports.merge(target[key], value);
        }
    }

    return target;
};


exports.decode = function (str) {

    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};


exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
};


exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};


exports.isBuffer = function (obj) {

    if (obj === null ||
        typeof obj === 'undefined') {

        return false;
    }

    return !!(obj.constructor &&
        obj.constructor.isBuffer &&
        obj.constructor.isBuffer(obj));
};

},{}],"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/alphabet.js":[function(require,module,exports){
var random = require('./random');

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;

var shuffled;

function reset() {
    shuffled = false;
}

function setCharacters(_alphabet_) {

    if (!_alphabet_) {
        if (alphabet !== ORIGINAL) {
            alphabet = ORIGINAL;
            reset();
        }
        return;
    }

    if (_alphabet_ === alphabet) {
        return;
    }


    if (_alphabet_.length !== ORIGINAL.length) {
        throw new Error('Custom alphabet for shortId must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
    }

    var unique = _alphabet_.split('').filter(function(item, ind, arr){
       return ind !== arr.lastIndexOf(item);
    });

    if (unique.length) {
        throw new Error('Custom alphabet for shortId must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
    }

    alphabet = _alphabet_;
    reset();
}

function setSeed(seed) {
    random.seed(seed);
    if (previousSeed !== seed) {
        reset();
        previousSeed = seed;
    }
}

function shuffle() {
    if (!alphabet) {
        setCharacters(ORIGINAL);
    }

    var sourceArray = alphabet.split('');
    var targetArray = [];
    var r = random();
    var characterIndex;
    while (sourceArray.length > 0) {
        r = random();
        characterIndex = Math.floor(r * sourceArray.length);
        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
    }
    return targetArray.join('');
}

function getShuffled() {
    if (shuffled) {
        return shuffled;
    }
    shuffled = shuffle();
    return shuffled;
}

/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */
function lookup(index) {
    var alphabetShuffled = getShuffled();
    return alphabetShuffled[index];
}

module.exports = {
    characters: setCharacters,
    seed:       setSeed,
    lookup:     lookup,
    shuffled:   getShuffled
};

},{"./random":"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/random.js"}],"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/encode.js":[function(require,module,exports){
var randomNum;

// Browser test
var hasCrypto = true;
if(typeof window !== 'undefined') {
    hasCrypto = false;
}
else {
    try {
        require.resolve('crypto');
    } catch(e) {
        hasCrypto = false;
    }
}

// Load the appropriate function
if(!hasCrypto) { // Browser or other JS runtimes without crypto
    // Test if Web Crypto API is available
    if( typeof window !== 'undefined' && ((window.crypto && window.crypto.getRandomValues) || (window.msCrypto && window.msCrypto.getRandomValues)) ) {
        var cryptoObj = window.crypto || window.msCrypto; // IE 11 uses window.msCrypto
        randomNum = function() {
            var dest = new Uint8Array(1);
            cryptoObj.getRandomValues(dest);
            return dest[0] & 0x30;
        };
    }
    else {
        // Fallback to Math.random(), which is not cryptographically-secure
        randomNum = function() {
            return Math.floor(Math.random() * 256) & 0x30;
        };
    }
}
else { // Node.js
    var randomBytes = require('crypto').randomBytes;
    randomNum = function() {
        return randomBytes(1)[0] & 0x30;
    };
}

function encode(lookup, number) {
    var loopCounter = 0;
    var done;

    var str = '';

    while (!done) {
        str = str + lookup( ( (number >> (4 * loopCounter)) & 0x0f ) | randomNum() );
        done = number < (Math.pow(16, loopCounter + 1 )  );
        loopCounter++;
    }
    return str;
}

module.exports = encode;

},{"crypto":"/Library/WebServer/Documents/tocktick/node_modules/browserify/lib/_empty.js"}],"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/random.js":[function(require,module,exports){

// Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */

var seed = 1;

module.exports = function random() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed/(233280.0);
};

module.exports.seed = function (_seed_) {
    seed = _seed_;
};
},{}],"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/shortid.js":[function(require,module,exports){
(function (process){
/*
 * Short Id
 * by Dylan Greene
 */

var alphabet = require('./alphabet'),
    encode = require('./encode');

// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!
var REDUCE_TIME = 1415358116771;

// don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16
var version = 4;

// if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
var clusterWorkerId = parseInt(process.env.NODE_UNIQUE_ID || 0, 10);

// Counter is used when shortId is called multiple times in one second.
var counter;

// Remember the last time shortId was called in case counter is needed.
var previousSeconds;

/**
 * Generate unique id
 * Returns string id
 */
function generate() {

    var str = '';

    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

    if (seconds === previousSeconds) {
        counter++;
    } else {
        counter = 0;
        previousSeconds = seconds;
    }

    str = str + encode(alphabet.lookup, version);
    str = str + encode(alphabet.lookup, clusterWorkerId);
    if (counter > 0) {
        str = str + encode(alphabet.lookup, counter);
    }
    str = str + encode(alphabet.lookup, seconds);

    return str;
}


/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as ShortId.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */
function seed(seedValue) {
    alphabet.seed(seedValue);
    return module.exports;
}

/**
 * Set the cluster worker or machine id
 * exposed as ShortId.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns ShortId module so it can be chained.
 */
function worker(workerId) {
    clusterWorkerId = workerId;
    return module.exports;
}

/**
 *
 * returns the shuffled alphabet
 */
function characters(newCharacters) {
    if (newCharacters !== undefined) {
        alphabet.characters(newCharacters);
    }

    return alphabet.shuffled();
}

/**
 * Decode the id to get the version and worker
 * Mainly for debugging and testing.
 * @param id - the ShortId-generated id.
 */
function decode(id) {
    var alphabet = characters();
    return {
        version: alphabet.indexOf(id.substr(0, 1)) & 0x0f,
        worker: alphabet.indexOf(id.substr(1, 1)) & 0x0f
    };
}

// Export all other functions as properties of the generate function
generate.generate = generate;
generate.seed = seed;
generate.worker = worker;
generate.characters = characters;
generate.decode = decode;

// Export generate
module.exports = generate;

}).call(this,require('_process'))

},{"./alphabet":"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/alphabet.js","./encode":"/Library/WebServer/Documents/tocktick/node_modules/shortid/lib/encode.js","_process":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/process/browser.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/browser.js":[function(require,module,exports){
'use strict';

var Promise = require('promise');
var Response = require('http-response-object');
var handleQs = require('./lib/handle-qs.js');

module.exports = doRequest;
function doRequest(method, url, options, callback) {
  var result = new Promise(function (resolve, reject) {
    var xhr = new window.XMLHttpRequest();

    // check types of arguments

    if (typeof method !== 'string') {
      throw new TypeError('The method must be a string.');
    }
    if (typeof url !== 'string') {
      throw new TypeError('The URL/path must be a string.');
    }
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (options === null || options === undefined) {
      options = {};
    }
    if (typeof options !== 'object') {
      throw new TypeError('Options must be an object (or null).');
    }
    if (typeof callback !== 'function') {
      callback = undefined;
    }

    method = method.toUpperCase();
    options.headers = options.headers || {};


    function attempt(n) {
      doRequest(method, url, {
        qs: options.qs,
        headers: options.headers,
        timeout: options.timeout
      }).nodeify(function (err, res) {
        var retry = err || res.statusCode >= 400;
        if (typeof options.retry === 'function') {
          retry = options.retry(err, res, n + 1);
        }
        if (n >= (options.maxRetries | 5)) {
          retry = false;
        }
        if (retry) {
          var delay = options.retryDelay;
          if (typeof options.retryDelay === 'function') {
            delay = options.retryDelay(err, res, n + 1);
          }
          delay = delay || 200;
          setTimeout(function () {
            attempt(n + 1);
          }, delay);
        } else {
          if (err) reject(err);
          else resolve(res);
        }
      });
    }
    if (options.retry && method === 'GET') {
      return attempt(0);
    }

    // handle cross domain

    var match;
    var crossDomain = !!((match = /^([\w-]+:)?\/\/([^\/]+)/.exec(options.uri)) && (match[2] != window.location.host));
    if (!crossDomain) options.headers['X-Requested-With'] = 'XMLHttpRequest';

    // handle query string
    if (options.qs) {
      url = handleQs(url, options.qs);
    }

    // handle json body
    if (options.json) {
      options.body = JSON.stringify(options.json);
      options.headers['Content-Type'] = 'application/json';
    }

    if (options.timeout) {
      xhr.timeout = options.timeout;
      var start = Date.now();
      xhr.ontimeout = function () {
        var duration = Date.now() - start;
        var err = new Error('Request timed out after ' + duration + 'ms');
        err.timeout = true;
        err.duration = duration;
        reject(err);
      };
    }
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        var headers = {};
        xhr.getAllResponseHeaders().split('\r\n').forEach(function (header) {
          var h = header.split(':');
          if (h.length > 1) {
            headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();
          }
        });
        var res = new Response(xhr.status, headers, xhr.responseText);
        res.url = url;
        resolve(res);
      }
    };

    // method, url, async
    xhr.open(method, url, true);

    for (var name in options.headers) {
      xhr.setRequestHeader(name, options.headers[name]);
    }

    // avoid sending empty string (#319)
    xhr.send(options.body ? options.body : null);
  });
  result.getBody = function () {
    return result.then(function (res) { return res.getBody(); });
  };
  return result.nodeify(callback);
}

},{"./lib/handle-qs.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/lib/handle-qs.js","http-response-object":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/http-response-object/index.js","promise":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/index.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/lib/handle-qs.js":[function(require,module,exports){
'use strict';

var parse = require('qs').parse;
var stringify = require('qs').stringify;

module.exports = handleQs;
function handleQs(url, query) {
  url = url.split('?');
  var start = url[0];
  var qs = (url[1] || '').split('#')[0];
  var end = url[1] && url[1].split('#').length > 1 ? '#' + url[1].split('#')[1] : '';

  var baseQs = parse(qs);
  for (var i in query) {
    baseQs[i] = query[i];
  }
  qs = stringify(baseQs);
  if (qs !== '') {
    qs = '?' + qs;
  }
  return start + qs + end;
}

},{"qs":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/index.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/http-response-object/index.js":[function(require,module,exports){
'use strict';

module.exports = Response;

/**
 * A response from a web request
 *
 * @param {Number} statusCode
 * @param {Object} headers
 * @param {Buffer} body
 */
function Response(statusCode, headers, body) {
  if (typeof statusCode !== 'number') {
    throw new TypeError('statusCode must be a number but was ' + (typeof statusCode));
  }
  if (headers === null) {
    throw new TypeError('headers cannot be null');
  }
  if (typeof headers !== 'object') {
    throw new TypeError('headers must be an object but was ' + (typeof headers));
  }
  this.statusCode = statusCode;
  this.headers = {};
  for (var key in headers) {
    this.headers[key.toLowerCase()] = headers[key];
  }
  this.body = body;
}

Response.prototype.getBody = function (encoding) {
  if (this.statusCode >= 300) {
    var err = new Error('Server responded with status code '
                    + this.statusCode + ':\n' + this.body.toString());
    err.statusCode = this.statusCode;
    err.headers = this.headers;
    err.body = this.body;
    throw err;
  }
  return encoding ? this.body.toString(encoding) : this.body;
};

},{}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/index.js":[function(require,module,exports){
'use strict';

module.exports = require('./lib/core.js')
require('./lib/done.js')
require('./lib/es6-extensions.js')
require('./lib/node-extensions.js')
},{"./lib/core.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/core.js","./lib/done.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/done.js","./lib/es6-extensions.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/es6-extensions.js","./lib/node-extensions.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/node-extensions.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/core.js":[function(require,module,exports){
'use strict';

var asap = require('asap')

module.exports = Promise;
function Promise(fn) {
  if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new')
  if (typeof fn !== 'function') throw new TypeError('not a function')
  var state = null
  var value = null
  var deferreds = []
  var self = this

  this.then = function(onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
      handle(new Handler(onFulfilled, onRejected, resolve, reject))
    })
  }

  function handle(deferred) {
    if (state === null) {
      deferreds.push(deferred)
      return
    }
    asap(function() {
      var cb = state ? deferred.onFulfilled : deferred.onRejected
      if (cb === null) {
        (state ? deferred.resolve : deferred.reject)(value)
        return
      }
      var ret
      try {
        ret = cb(value)
      }
      catch (e) {
        deferred.reject(e)
        return
      }
      deferred.resolve(ret)
    })
  }

  function resolve(newValue) {
    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then
        if (typeof then === 'function') {
          doResolve(then.bind(newValue), resolve, reject)
          return
        }
      }
      state = true
      value = newValue
      finale()
    } catch (e) { reject(e) }
  }

  function reject(newValue) {
    state = false
    value = newValue
    finale()
  }

  function finale() {
    for (var i = 0, len = deferreds.length; i < len; i++)
      handle(deferreds[i])
    deferreds = null
  }

  doResolve(fn, resolve, reject)
}


function Handler(onFulfilled, onRejected, resolve, reject){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null
  this.onRejected = typeof onRejected === 'function' ? onRejected : null
  this.resolve = resolve
  this.reject = reject
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, onFulfilled, onRejected) {
  var done = false;
  try {
    fn(function (value) {
      if (done) return
      done = true
      onFulfilled(value)
    }, function (reason) {
      if (done) return
      done = true
      onRejected(reason)
    })
  } catch (ex) {
    if (done) return
    done = true
    onRejected(ex)
  }
}

},{"asap":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/node_modules/asap/asap.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/done.js":[function(require,module,exports){
'use strict';

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this
  self.then(null, function (err) {
    asap(function () {
      throw err
    })
  })
}
},{"./core.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/core.js","asap":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/node_modules/asap/asap.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/es6-extensions.js":[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise

/* Static Functions */

function ValuePromise(value) {
  this.then = function (onFulfilled) {
    if (typeof onFulfilled !== 'function') return this
    return new Promise(function (resolve, reject) {
      asap(function () {
        try {
          resolve(onFulfilled(value))
        } catch (ex) {
          reject(ex);
        }
      })
    })
  }
}
ValuePromise.prototype = Promise.prototype

var TRUE = new ValuePromise(true)
var FALSE = new ValuePromise(false)
var NULL = new ValuePromise(null)
var UNDEFINED = new ValuePromise(undefined)
var ZERO = new ValuePromise(0)
var EMPTYSTRING = new ValuePromise('')

Promise.resolve = function (value) {
  if (value instanceof Promise) return value

  if (value === null) return NULL
  if (value === undefined) return UNDEFINED
  if (value === true) return TRUE
  if (value === false) return FALSE
  if (value === 0) return ZERO
  if (value === '') return EMPTYSTRING

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then
      if (typeof then === 'function') {
        return new Promise(then.bind(value))
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex)
      })
    }
  }

  return new ValuePromise(value)
}

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr)

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([])
    var remaining = args.length
    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then
          if (typeof then === 'function') {
            then.call(val, function (val) { res(i, val) }, reject)
            return
          }
        }
        args[i] = val
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex)
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i])
    }
  })
}

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) { 
    reject(value);
  });
}

Promise.race = function (values) {
  return new Promise(function (resolve, reject) { 
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    })
  });
}

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
}

},{"./core.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/core.js","asap":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/node_modules/asap/asap.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/node-extensions.js":[function(require,module,exports){
'use strict';

//This file contains then/promise specific extensions that are only useful for node.js interop

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise

/* Static Functions */

Promise.denodeify = function (fn, argumentCount) {
  argumentCount = argumentCount || Infinity
  return function () {
    var self = this
    var args = Array.prototype.slice.call(arguments)
    return new Promise(function (resolve, reject) {
      while (args.length && args.length > argumentCount) {
        args.pop()
      }
      args.push(function (err, res) {
        if (err) reject(err)
        else resolve(res)
      })
      var res = fn.apply(self, args)
      if (res && (typeof res === 'object' || typeof res === 'function') && typeof res.then === 'function') {
        resolve(res)
      }
    })
  }
}
Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments)
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null
    var ctx = this
    try {
      return fn.apply(this, arguments).nodeify(callback, ctx)
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) { reject(ex) })
      } else {
        asap(function () {
          callback.call(ctx, ex)
        })
      }
    }
  }
}

Promise.prototype.nodeify = function (callback, ctx) {
  if (typeof callback != 'function') return this

  this.then(function (value) {
    asap(function () {
      callback.call(ctx, null, value)
    })
  }, function (err) {
    asap(function () {
      callback.call(ctx, err)
    })
  })
}

},{"./core.js":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/lib/core.js","asap":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/node_modules/asap/asap.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/promise/node_modules/asap/asap.js":[function(require,module,exports){
(function (process){

// Use the fastest possible means to execute a task in a future turn
// of the event loop.

// linked list of tasks (single, with head node)
var head = {task: void 0, next: null};
var tail = head;
var flushing = false;
var requestFlush = void 0;
var isNodeJS = false;

function flush() {
    /* jshint loopfunc: true */

    while (head.next) {
        head = head.next;
        var task = head.task;
        head.task = void 0;
        var domain = head.domain;

        if (domain) {
            head.domain = void 0;
            domain.enter();
        }

        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function() {
                   throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    flushing = false;
}

if (typeof process !== "undefined" && process.nextTick) {
    // Node.js before 0.9. Note that some fake-Node environments, like the
    // Mocha test runner, introduce a `process` global without a `nextTick`.
    isNodeJS = true;

    requestFlush = function () {
        process.nextTick(flush);
    };

} else if (typeof setImmediate === "function") {
    // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
    if (typeof window !== "undefined") {
        requestFlush = setImmediate.bind(window, flush);
    } else {
        requestFlush = function () {
            setImmediate(flush);
        };
    }

} else if (typeof MessageChannel !== "undefined") {
    // modern browsers
    // http://www.nonblocking.io/2011/06/windownexttick.html
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    requestFlush = function () {
        channel.port2.postMessage(0);
    };

} else {
    // old browsers
    requestFlush = function () {
        setTimeout(flush, 0);
    };
}

function asap(task) {
    tail = tail.next = {
        task: task,
        domain: isNodeJS && process.domain,
        next: null
    };

    if (!flushing) {
        flushing = true;
        requestFlush();
    }
};

module.exports = asap;


}).call(this,require('_process'))

},{"_process":"/Library/WebServer/Documents/tocktick/node_modules/browserify/node_modules/process/browser.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/index.js":[function(require,module,exports){
arguments[4]["/Library/WebServer/Documents/tocktick/node_modules/qs/index.js"][0].apply(exports,arguments)
},{"./lib/":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/index.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/index.js":[function(require,module,exports){
arguments[4]["/Library/WebServer/Documents/tocktick/node_modules/qs/lib/index.js"][0].apply(exports,arguments)
},{"./parse":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/parse.js","./stringify":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/stringify.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/parse.js":[function(require,module,exports){
arguments[4]["/Library/WebServer/Documents/tocktick/node_modules/qs/lib/parse.js"][0].apply(exports,arguments)
},{"./utils":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/utils.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/stringify.js":[function(require,module,exports){
arguments[4]["/Library/WebServer/Documents/tocktick/node_modules/qs/lib/stringify.js"][0].apply(exports,arguments)
},{"./utils":"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/utils.js"}],"/Library/WebServer/Documents/tocktick/node_modules/then-request/node_modules/qs/lib/utils.js":[function(require,module,exports){
arguments[4]["/Library/WebServer/Documents/tocktick/node_modules/qs/lib/utils.js"][0].apply(exports,arguments)
},{}]},{},["./public/js/app.js"])
//# sourceMappingURL=data:application/json;base64,
